<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1254" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1237.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1237.00"> </text><svg id="frames" x="10" width="1180" total_samples="11132"><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0000%" y="1173" width="0.0180%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0000%" y="1157" width="0.0180%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0000%" y="1141" width="0.0180%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0000%" y="1125" width="0.0180%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0000%" y="1109" width="0.0180%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0000%" y="1093" width="0.0180%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0000%" y="1077" width="0.0180%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0000%" y="1061" width="0.0180%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0000%" y="1045" width="0.0180%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0000%" y="1029" width="0.0180%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0000%" y="1013" width="0.0180%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1023.50"></text></g><g><title>futures_task::waker::clone_arc_raw (2 samples, 0.02%)</title><rect x="0.1527%" y="549" width="0.0180%" height="15" fill="rgb(240,193,28)" fg:x="17" fg:w="2"/><text x="0.4027%" y="559.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 0.06%)</title><rect x="0.1168%" y="597" width="0.0629%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="7"/><text x="0.3668%" y="607.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (4 samples, 0.04%)</title><rect x="0.1437%" y="581" width="0.0359%" height="15" fill="rgb(206,188,39)" fg:x="16" fg:w="4"/><text x="0.3937%" y="591.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (3 samples, 0.03%)</title><rect x="0.1527%" y="565" width="0.0269%" height="15" fill="rgb(217,207,13)" fg:x="17" fg:w="3"/><text x="0.4027%" y="575.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.09%)</title><rect x="0.1078%" y="629" width="0.0898%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="10"/><text x="0.3578%" y="639.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 0.09%)</title><rect x="0.1078%" y="613" width="0.0898%" height="15" fill="rgb(225,20,46)" fg:x="12" fg:w="10"/><text x="0.3578%" y="623.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (17 samples, 0.15%)</title><rect x="0.0539%" y="645" width="0.1527%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="17"/><text x="0.3039%" y="655.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="0.2066%" y="645" width="0.0180%" height="15" fill="rgb(221,200,47)" fg:x="23" fg:w="2"/><text x="0.4566%" y="655.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="0.2066%" y="629" width="0.0180%" height="15" fill="rgb(226,26,5)" fg:x="23" fg:w="2"/><text x="0.4566%" y="639.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt;::push (4 samples, 0.04%)</title><rect x="0.2605%" y="645" width="0.0359%" height="15" fill="rgb(249,33,26)" fg:x="29" fg:w="4"/><text x="0.5105%" y="655.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="0.2785%" y="629" width="0.0180%" height="15" fill="rgb(235,183,28)" fg:x="31" fg:w="2"/><text x="0.5285%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="0.3503%" y="453" width="0.0449%" height="15" fill="rgb(221,5,38)" fg:x="39" fg:w="5"/><text x="0.6003%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="0.3503%" y="437" width="0.0449%" height="15" fill="rgb(247,18,42)" fg:x="39" fg:w="5"/><text x="0.6003%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="0.3503%" y="421" width="0.0449%" height="15" fill="rgb(241,131,45)" fg:x="39" fg:w="5"/><text x="0.6003%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="0.3503%" y="405" width="0.0449%" height="15" fill="rgb(249,31,29)" fg:x="39" fg:w="5"/><text x="0.6003%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="0.3503%" y="389" width="0.0449%" height="15" fill="rgb(225,111,53)" fg:x="39" fg:w="5"/><text x="0.6003%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="0.3503%" y="373" width="0.0449%" height="15" fill="rgb(238,160,17)" fg:x="39" fg:w="5"/><text x="0.6003%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="0.3503%" y="357" width="0.0449%" height="15" fill="rgb(214,148,48)" fg:x="39" fg:w="5"/><text x="0.6003%" y="367.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.3593%" y="341" width="0.0359%" height="15" fill="rgb(232,36,49)" fg:x="40" fg:w="4"/><text x="0.6093%" y="351.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.3593%" y="325" width="0.0359%" height="15" fill="rgb(209,103,24)" fg:x="40" fg:w="4"/><text x="0.6093%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.3683%" y="309" width="0.0269%" height="15" fill="rgb(229,88,8)" fg:x="41" fg:w="3"/><text x="0.6183%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.3773%" y="293" width="0.0180%" height="15" fill="rgb(213,181,19)" fg:x="42" fg:w="2"/><text x="0.6273%" y="303.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (14 samples, 0.13%)</title><rect x="0.3144%" y="581" width="0.1258%" height="15" fill="rgb(254,191,54)" fg:x="35" fg:w="14"/><text x="0.5644%" y="591.50"></text></g><g><title>__rdl_alloc (14 samples, 0.13%)</title><rect x="0.3144%" y="565" width="0.1258%" height="15" fill="rgb(241,83,37)" fg:x="35" fg:w="14"/><text x="0.5644%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14 samples, 0.13%)</title><rect x="0.3144%" y="549" width="0.1258%" height="15" fill="rgb(233,36,39)" fg:x="35" fg:w="14"/><text x="0.5644%" y="559.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (14 samples, 0.13%)</title><rect x="0.3144%" y="533" width="0.1258%" height="15" fill="rgb(226,3,54)" fg:x="35" fg:w="14"/><text x="0.5644%" y="543.50"></text></g><g><title>__posix_memalign (14 samples, 0.13%)</title><rect x="0.3144%" y="517" width="0.1258%" height="15" fill="rgb(245,192,40)" fg:x="35" fg:w="14"/><text x="0.5644%" y="527.50"></text></g><g><title>_int_memalign (14 samples, 0.13%)</title><rect x="0.3144%" y="501" width="0.1258%" height="15" fill="rgb(238,167,29)" fg:x="35" fg:w="14"/><text x="0.5644%" y="511.50"></text></g><g><title>_int_malloc (14 samples, 0.13%)</title><rect x="0.3144%" y="485" width="0.1258%" height="15" fill="rgb(232,182,51)" fg:x="35" fg:w="14"/><text x="0.5644%" y="495.50"></text></g><g><title>sysmalloc (13 samples, 0.12%)</title><rect x="0.3234%" y="469" width="0.1168%" height="15" fill="rgb(231,60,39)" fg:x="36" fg:w="13"/><text x="0.5734%" y="479.50"></text></g><g><title>__GI___mprotect (5 samples, 0.04%)</title><rect x="0.3953%" y="453" width="0.0449%" height="15" fill="rgb(208,69,12)" fg:x="44" fg:w="5"/><text x="0.6453%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="0.3953%" y="437" width="0.0449%" height="15" fill="rgb(235,93,37)" fg:x="44" fg:w="5"/><text x="0.6453%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="0.3953%" y="421" width="0.0449%" height="15" fill="rgb(213,116,39)" fg:x="44" fg:w="5"/><text x="0.6453%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="0.3953%" y="405" width="0.0449%" height="15" fill="rgb(222,207,29)" fg:x="44" fg:w="5"/><text x="0.6453%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.4042%" y="389" width="0.0359%" height="15" fill="rgb(206,96,30)" fg:x="45" fg:w="4"/><text x="0.6542%" y="399.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.4042%" y="373" width="0.0359%" height="15" fill="rgb(218,138,4)" fg:x="45" fg:w="4"/><text x="0.6542%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.4222%" y="357" width="0.0180%" height="15" fill="rgb(250,191,14)" fg:x="47" fg:w="2"/><text x="0.6722%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.4222%" y="341" width="0.0180%" height="15" fill="rgb(239,60,40)" fg:x="47" fg:w="2"/><text x="0.6722%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.4222%" y="325" width="0.0180%" height="15" fill="rgb(206,27,48)" fg:x="47" fg:w="2"/><text x="0.6722%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.4222%" y="309" width="0.0180%" height="15" fill="rgb(225,35,8)" fg:x="47" fg:w="2"/><text x="0.6722%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.4222%" y="293" width="0.0180%" height="15" fill="rgb(250,213,24)" fg:x="47" fg:w="2"/><text x="0.6722%" y="303.50"></text></g><g><title>tokio::runtime::context::current::with_current (16 samples, 0.14%)</title><rect x="0.3054%" y="613" width="0.1437%" height="15" fill="rgb(247,123,22)" fg:x="34" fg:w="16"/><text x="0.5554%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Handle::spawn (16 samples, 0.14%)</title><rect x="0.3054%" y="597" width="0.1437%" height="15" fill="rgb(231,138,38)" fg:x="34" fg:w="16"/><text x="0.5554%" y="607.50"></text></g><g><title>yadb::storage::Tree::get (18 samples, 0.16%)</title><rect x="0.2964%" y="645" width="0.1617%" height="15" fill="rgb(231,145,46)" fg:x="33" fg:w="18"/><text x="0.5464%" y="655.50"></text></g><g><title>tokio::task::spawn::spawn (17 samples, 0.15%)</title><rect x="0.3054%" y="629" width="0.1527%" height="15" fill="rgb(251,118,11)" fg:x="34" fg:w="17"/><text x="0.5554%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="0.4671%" y="565" width="0.0180%" height="15" fill="rgb(217,147,25)" fg:x="52" fg:w="2"/><text x="0.7171%" y="575.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="0.4941%" y="485" width="0.0269%" height="15" fill="rgb(247,81,37)" fg:x="55" fg:w="3"/><text x="0.7441%" y="495.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="0.5300%" y="453" width="0.0719%" height="15" fill="rgb(209,12,38)" fg:x="59" fg:w="8"/><text x="0.7800%" y="463.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="0.5300%" y="437" width="0.0719%" height="15" fill="rgb(227,1,9)" fg:x="59" fg:w="8"/><text x="0.7800%" y="447.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="0.5300%" y="421" width="0.0719%" height="15" fill="rgb(248,47,43)" fg:x="59" fg:w="8"/><text x="0.7800%" y="431.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="0.5390%" y="405" width="0.0629%" height="15" fill="rgb(221,10,30)" fg:x="60" fg:w="7"/><text x="0.7890%" y="415.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="0.5480%" y="389" width="0.0539%" height="15" fill="rgb(210,229,1)" fg:x="61" fg:w="6"/><text x="0.7980%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="0.5480%" y="373" width="0.0539%" height="15" fill="rgb(222,148,37)" fg:x="61" fg:w="6"/><text x="0.7980%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="0.5480%" y="357" width="0.0539%" height="15" fill="rgb(234,67,33)" fg:x="61" fg:w="6"/><text x="0.7980%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="0.5480%" y="341" width="0.0539%" height="15" fill="rgb(247,98,35)" fg:x="61" fg:w="6"/><text x="0.7980%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="0.5480%" y="325" width="0.0539%" height="15" fill="rgb(247,138,52)" fg:x="61" fg:w="6"/><text x="0.7980%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="0.5480%" y="309" width="0.0539%" height="15" fill="rgb(213,79,30)" fg:x="61" fg:w="6"/><text x="0.7980%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="0.5480%" y="293" width="0.0539%" height="15" fill="rgb(246,177,23)" fg:x="61" fg:w="6"/><text x="0.7980%" y="303.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (25 samples, 0.22%)</title><rect x="0.4671%" y="581" width="0.2246%" height="15" fill="rgb(230,62,27)" fg:x="52" fg:w="25"/><text x="0.7171%" y="591.50"></text></g><g><title>__rdl_alloc (23 samples, 0.21%)</title><rect x="0.4851%" y="565" width="0.2066%" height="15" fill="rgb(216,154,8)" fg:x="54" fg:w="23"/><text x="0.7351%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (23 samples, 0.21%)</title><rect x="0.4851%" y="549" width="0.2066%" height="15" fill="rgb(244,35,45)" fg:x="54" fg:w="23"/><text x="0.7351%" y="559.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (23 samples, 0.21%)</title><rect x="0.4851%" y="533" width="0.2066%" height="15" fill="rgb(251,115,12)" fg:x="54" fg:w="23"/><text x="0.7351%" y="543.50"></text></g><g><title>__posix_memalign (23 samples, 0.21%)</title><rect x="0.4851%" y="517" width="0.2066%" height="15" fill="rgb(240,54,50)" fg:x="54" fg:w="23"/><text x="0.7351%" y="527.50"></text></g><g><title>_int_memalign (22 samples, 0.20%)</title><rect x="0.4941%" y="501" width="0.1976%" height="15" fill="rgb(233,84,52)" fg:x="55" fg:w="22"/><text x="0.7441%" y="511.50"></text></g><g><title>_int_malloc (19 samples, 0.17%)</title><rect x="0.5210%" y="485" width="0.1707%" height="15" fill="rgb(207,117,47)" fg:x="58" fg:w="19"/><text x="0.7710%" y="495.50"></text></g><g><title>sysmalloc (19 samples, 0.17%)</title><rect x="0.5210%" y="469" width="0.1707%" height="15" fill="rgb(249,43,39)" fg:x="58" fg:w="19"/><text x="0.7710%" y="479.50"></text></g><g><title>__GI___mprotect (10 samples, 0.09%)</title><rect x="0.6019%" y="453" width="0.0898%" height="15" fill="rgb(209,38,44)" fg:x="67" fg:w="10"/><text x="0.8519%" y="463.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="0.6288%" y="437" width="0.0629%" height="15" fill="rgb(236,212,23)" fg:x="70" fg:w="7"/><text x="0.8788%" y="447.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="0.6288%" y="421" width="0.0629%" height="15" fill="rgb(242,79,21)" fg:x="70" fg:w="7"/><text x="0.8788%" y="431.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="0.6288%" y="405" width="0.0629%" height="15" fill="rgb(211,96,35)" fg:x="70" fg:w="7"/><text x="0.8788%" y="415.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="0.6378%" y="389" width="0.0539%" height="15" fill="rgb(253,215,40)" fg:x="71" fg:w="6"/><text x="0.8878%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="0.6378%" y="373" width="0.0539%" height="15" fill="rgb(211,81,21)" fg:x="71" fg:w="6"/><text x="0.8878%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.6558%" y="357" width="0.0359%" height="15" fill="rgb(208,190,38)" fg:x="73" fg:w="4"/><text x="0.9058%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.6737%" y="341" width="0.0180%" height="15" fill="rgb(235,213,38)" fg:x="75" fg:w="2"/><text x="0.9237%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (75 samples, 0.67%)</title><rect x="0.0269%" y="677" width="0.6737%" height="15" fill="rgb(237,122,38)" fg:x="3" fg:w="75"/><text x="0.2769%" y="687.50"></text></g><g><title>test_storage::split_bench::{{closure}} (75 samples, 0.67%)</title><rect x="0.0269%" y="661" width="0.6737%" height="15" fill="rgb(244,218,35)" fg:x="3" fg:w="75"/><text x="0.2769%" y="671.50"></text></g><g><title>yadb::storage::Tree::put (27 samples, 0.24%)</title><rect x="0.4581%" y="645" width="0.2425%" height="15" fill="rgb(240,68,47)" fg:x="51" fg:w="27"/><text x="0.7081%" y="655.50"></text></g><g><title>tokio::task::spawn::spawn (27 samples, 0.24%)</title><rect x="0.4581%" y="629" width="0.2425%" height="15" fill="rgb(210,16,53)" fg:x="51" fg:w="27"/><text x="0.7081%" y="639.50"></text></g><g><title>tokio::runtime::context::current::with_current (27 samples, 0.24%)</title><rect x="0.4581%" y="613" width="0.2425%" height="15" fill="rgb(235,124,12)" fg:x="51" fg:w="27"/><text x="0.7081%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Handle::spawn (26 samples, 0.23%)</title><rect x="0.4671%" y="597" width="0.2336%" height="15" fill="rgb(224,169,11)" fg:x="52" fg:w="26"/><text x="0.7171%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.02%)</title><rect x="0.7007%" y="645" width="0.0180%" height="15" fill="rgb(250,166,2)" fg:x="78" fg:w="2"/><text x="0.9507%" y="655.50"></text></g><g><title>__clock_gettime_2 (2 samples, 0.02%)</title><rect x="0.7007%" y="629" width="0.0180%" height="15" fill="rgb(242,216,29)" fg:x="78" fg:w="2"/><text x="0.9507%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (5 samples, 0.04%)</title><rect x="0.7007%" y="677" width="0.0449%" height="15" fill="rgb(230,116,27)" fg:x="78" fg:w="5"/><text x="0.9507%" y="687.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (5 samples, 0.04%)</title><rect x="0.7007%" y="661" width="0.0449%" height="15" fill="rgb(228,99,48)" fg:x="78" fg:w="5"/><text x="0.9507%" y="671.50"></text></g><g><title>tokio::runtime::park::Inner::park_timeout (3 samples, 0.03%)</title><rect x="0.7186%" y="645" width="0.0269%" height="15" fill="rgb(253,11,6)" fg:x="80" fg:w="3"/><text x="0.9686%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (3 samples, 0.03%)</title><rect x="0.7186%" y="629" width="0.0269%" height="15" fill="rgb(247,143,39)" fg:x="80" fg:w="3"/><text x="0.9686%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (3 samples, 0.03%)</title><rect x="0.7186%" y="613" width="0.0269%" height="15" fill="rgb(236,97,10)" fg:x="80" fg:w="3"/><text x="0.9686%" y="623.50"></text></g><g><title>std::sys::unix::futex::futex_wait (3 samples, 0.03%)</title><rect x="0.7186%" y="597" width="0.0269%" height="15" fill="rgb(233,208,19)" fg:x="80" fg:w="3"/><text x="0.9686%" y="607.50"></text></g><g><title>syscall (3 samples, 0.03%)</title><rect x="0.7186%" y="581" width="0.0269%" height="15" fill="rgb(216,164,2)" fg:x="80" fg:w="3"/><text x="0.9686%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.7186%" y="565" width="0.0269%" height="15" fill="rgb(220,129,5)" fg:x="80" fg:w="3"/><text x="0.9686%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.7186%" y="549" width="0.0269%" height="15" fill="rgb(242,17,10)" fg:x="80" fg:w="3"/><text x="0.9686%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.7186%" y="533" width="0.0269%" height="15" fill="rgb(242,107,0)" fg:x="80" fg:w="3"/><text x="0.9686%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.7186%" y="517" width="0.0269%" height="15" fill="rgb(251,28,31)" fg:x="80" fg:w="3"/><text x="0.9686%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.7186%" y="501" width="0.0269%" height="15" fill="rgb(233,223,10)" fg:x="80" fg:w="3"/><text x="0.9686%" y="511.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.7186%" y="485" width="0.0269%" height="15" fill="rgb(215,21,27)" fg:x="80" fg:w="3"/><text x="0.9686%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.7276%" y="469" width="0.0180%" height="15" fill="rgb(232,23,21)" fg:x="81" fg:w="2"/><text x="0.9776%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.7276%" y="453" width="0.0180%" height="15" fill="rgb(244,5,23)" fg:x="81" fg:w="2"/><text x="0.9776%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.7276%" y="437" width="0.0180%" height="15" fill="rgb(226,81,46)" fg:x="81" fg:w="2"/><text x="0.9776%" y="447.50"></text></g><g><title>&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="0.7725%" y="661" width="0.0180%" height="15" fill="rgb(247,70,30)" fg:x="86" fg:w="2"/><text x="1.0225%" y="671.50"></text></g><g><title>std::panicking::try (3 samples, 0.03%)</title><rect x="0.8085%" y="645" width="0.0269%" height="15" fill="rgb(212,68,19)" fg:x="90" fg:w="3"/><text x="1.0585%" y="655.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (2 samples, 0.02%)</title><rect x="0.8803%" y="629" width="0.0180%" height="15" fill="rgb(240,187,13)" fg:x="98" fg:w="2"/><text x="1.1303%" y="639.50"></text></g><g><title>crossbeam_epoch::default::with_handle (3 samples, 0.03%)</title><rect x="0.9253%" y="597" width="0.0269%" height="15" fill="rgb(223,113,26)" fg:x="103" fg:w="3"/><text x="1.1753%" y="607.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (2 samples, 0.02%)</title><rect x="0.9342%" y="581" width="0.0180%" height="15" fill="rgb(206,192,2)" fg:x="104" fg:w="2"/><text x="1.1842%" y="591.50"></text></g><g><title>crossbeam_skiplist::map::SkipMap&lt;K,V&gt;::get (20 samples, 0.18%)</title><rect x="0.9253%" y="613" width="0.1797%" height="15" fill="rgb(241,108,4)" fg:x="103" fg:w="20"/><text x="1.1753%" y="623.50"></text></g><g><title>crossbeam_skiplist::base::try_pin_loop (17 samples, 0.15%)</title><rect x="0.9522%" y="597" width="0.1527%" height="15" fill="rgb(247,173,49)" fg:x="106" fg:w="17"/><text x="1.2022%" y="607.50"></text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::get (17 samples, 0.15%)</title><rect x="0.9522%" y="581" width="0.1527%" height="15" fill="rgb(224,114,35)" fg:x="106" fg:w="17"/><text x="1.2022%" y="591.50"></text></g><g><title>__memcmp_avx2_movbe (6 samples, 0.05%)</title><rect x="1.0510%" y="565" width="0.0539%" height="15" fill="rgb(245,159,27)" fg:x="117" fg:w="6"/><text x="1.3010%" y="575.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (3 samples, 0.03%)</title><rect x="1.1139%" y="613" width="0.0269%" height="15" fill="rgb(245,172,44)" fg:x="124" fg:w="3"/><text x="1.3639%" y="623.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (3 samples, 0.03%)</title><rect x="1.1409%" y="613" width="0.0269%" height="15" fill="rgb(236,23,11)" fg:x="127" fg:w="3"/><text x="1.3909%" y="623.50"></text></g><g><title>__GI___libc_free (25 samples, 0.22%)</title><rect x="1.2037%" y="597" width="0.2246%" height="15" fill="rgb(205,117,38)" fg:x="134" fg:w="25"/><text x="1.4537%" y="607.50"></text></g><g><title>__close (23 samples, 0.21%)</title><rect x="1.4283%" y="597" width="0.2066%" height="15" fill="rgb(237,72,25)" fg:x="159" fg:w="23"/><text x="1.6783%" y="607.50"></text></g><g><title>[unknown] (18 samples, 0.16%)</title><rect x="1.4732%" y="581" width="0.1617%" height="15" fill="rgb(244,70,9)" fg:x="164" fg:w="18"/><text x="1.7232%" y="591.50"></text></g><g><title>[unknown] (18 samples, 0.16%)</title><rect x="1.4732%" y="565" width="0.1617%" height="15" fill="rgb(217,125,39)" fg:x="164" fg:w="18"/><text x="1.7232%" y="575.50"></text></g><g><title>[unknown] (17 samples, 0.15%)</title><rect x="1.4822%" y="549" width="0.1527%" height="15" fill="rgb(235,36,10)" fg:x="165" fg:w="17"/><text x="1.7322%" y="559.50"></text></g><g><title>[unknown] (16 samples, 0.14%)</title><rect x="1.4912%" y="533" width="0.1437%" height="15" fill="rgb(251,123,47)" fg:x="166" fg:w="16"/><text x="1.7412%" y="543.50"></text></g><g><title>[unknown] (16 samples, 0.14%)</title><rect x="1.4912%" y="517" width="0.1437%" height="15" fill="rgb(221,13,13)" fg:x="166" fg:w="16"/><text x="1.7412%" y="527.50"></text></g><g><title>[unknown] (11 samples, 0.10%)</title><rect x="1.5361%" y="501" width="0.0988%" height="15" fill="rgb(238,131,9)" fg:x="171" fg:w="11"/><text x="1.7861%" y="511.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="1.5631%" y="485" width="0.0719%" height="15" fill="rgb(211,50,8)" fg:x="174" fg:w="8"/><text x="1.8131%" y="495.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="1.5631%" y="469" width="0.0719%" height="15" fill="rgb(245,182,24)" fg:x="174" fg:w="8"/><text x="1.8131%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="1.5900%" y="453" width="0.0449%" height="15" fill="rgb(242,14,37)" fg:x="177" fg:w="5"/><text x="1.8400%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="1.5990%" y="437" width="0.0359%" height="15" fill="rgb(246,228,12)" fg:x="178" fg:w="4"/><text x="1.8490%" y="447.50"></text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.04%)</title><rect x="1.6349%" y="597" width="0.0449%" height="15" fill="rgb(213,55,15)" fg:x="182" fg:w="5"/><text x="1.8849%" y="607.50"></text></g><g><title>__rust_dealloc (3 samples, 0.03%)</title><rect x="1.6888%" y="597" width="0.0269%" height="15" fill="rgb(209,9,3)" fg:x="188" fg:w="3"/><text x="1.9388%" y="607.50"></text></g><g><title>_int_free (60 samples, 0.54%)</title><rect x="1.7158%" y="597" width="0.5390%" height="15" fill="rgb(230,59,30)" fg:x="191" fg:w="60"/><text x="1.9658%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (2 samples, 0.02%)</title><rect x="2.2548%" y="597" width="0.0180%" height="15" fill="rgb(209,121,21)" fg:x="251" fg:w="2"/><text x="2.5048%" y="607.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.02%)</title><rect x="2.2548%" y="581" width="0.0180%" height="15" fill="rgb(220,109,13)" fg:x="251" fg:w="2"/><text x="2.5048%" y="591.50"></text></g><g><title>std::path::Path::to_path_buf (2 samples, 0.02%)</title><rect x="2.2727%" y="581" width="0.0180%" height="15" fill="rgb(232,18,1)" fg:x="253" fg:w="2"/><text x="2.5227%" y="591.50"></text></g><g><title>std::ffi::os_str::OsStr::to_os_string (2 samples, 0.02%)</title><rect x="2.2727%" y="565" width="0.0180%" height="15" fill="rgb(215,41,42)" fg:x="253" fg:w="2"/><text x="2.5227%" y="575.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (2 samples, 0.02%)</title><rect x="2.2727%" y="549" width="0.0180%" height="15" fill="rgb(224,123,36)" fg:x="253" fg:w="2"/><text x="2.5227%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.02%)</title><rect x="2.2727%" y="533" width="0.0180%" height="15" fill="rgb(240,125,3)" fg:x="253" fg:w="2"/><text x="2.5227%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="2.2727%" y="517" width="0.0180%" height="15" fill="rgb(205,98,50)" fg:x="253" fg:w="2"/><text x="2.5227%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="2.2727%" y="501" width="0.0180%" height="15" fill="rgb(205,185,37)" fg:x="253" fg:w="2"/><text x="2.5227%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="2.2727%" y="485" width="0.0180%" height="15" fill="rgb(238,207,15)" fg:x="253" fg:w="2"/><text x="2.5227%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="2.2727%" y="469" width="0.0180%" height="15" fill="rgb(213,199,42)" fg:x="253" fg:w="2"/><text x="2.5227%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="2.2727%" y="453" width="0.0180%" height="15" fill="rgb(235,201,11)" fg:x="253" fg:w="2"/><text x="2.5227%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="2.2727%" y="437" width="0.0180%" height="15" fill="rgb(207,46,11)" fg:x="253" fg:w="2"/><text x="2.5227%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="2.2727%" y="421" width="0.0180%" height="15" fill="rgb(241,35,35)" fg:x="253" fg:w="2"/><text x="2.5227%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="2.2727%" y="405" width="0.0180%" height="15" fill="rgb(243,32,47)" fg:x="253" fg:w="2"/><text x="2.5227%" y="415.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="2.2727%" y="389" width="0.0180%" height="15" fill="rgb(247,202,23)" fg:x="253" fg:w="2"/><text x="2.5227%" y="399.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="2.2727%" y="373" width="0.0180%" height="15" fill="rgb(219,102,11)" fg:x="253" fg:w="2"/><text x="2.5227%" y="383.50"></text></g><g><title>std::path::Path::_join (4 samples, 0.04%)</title><rect x="2.2727%" y="597" width="0.0359%" height="15" fill="rgb(243,110,44)" fg:x="253" fg:w="4"/><text x="2.5227%" y="607.50"></text></g><g><title>std::path::PathBuf::push (2 samples, 0.02%)</title><rect x="2.2907%" y="581" width="0.0180%" height="15" fill="rgb(222,74,54)" fg:x="255" fg:w="2"/><text x="2.5407%" y="591.50"></text></g><g><title>std::path::PathBuf::_push (2 samples, 0.02%)</title><rect x="2.2907%" y="565" width="0.0180%" height="15" fill="rgb(216,99,12)" fg:x="255" fg:w="2"/><text x="2.5407%" y="575.50"></text></g><g><title>std::ffi::os_str::OsString::push (2 samples, 0.02%)</title><rect x="2.2907%" y="549" width="0.0180%" height="15" fill="rgb(226,22,26)" fg:x="255" fg:w="2"/><text x="2.5407%" y="559.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (2 samples, 0.02%)</title><rect x="2.2907%" y="533" width="0.0180%" height="15" fill="rgb(217,163,10)" fg:x="255" fg:w="2"/><text x="2.5407%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.02%)</title><rect x="2.2907%" y="517" width="0.0180%" height="15" fill="rgb(213,25,53)" fg:x="255" fg:w="2"/><text x="2.5407%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="2.2907%" y="501" width="0.0180%" height="15" fill="rgb(252,105,26)" fg:x="255" fg:w="2"/><text x="2.5407%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.02%)</title><rect x="2.2907%" y="485" width="0.0180%" height="15" fill="rgb(220,39,43)" fg:x="255" fg:w="2"/><text x="2.5407%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="2.2907%" y="469" width="0.0180%" height="15" fill="rgb(229,68,48)" fg:x="255" fg:w="2"/><text x="2.5407%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="2.2907%" y="453" width="0.0180%" height="15" fill="rgb(252,8,32)" fg:x="255" fg:w="2"/><text x="2.5407%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="2.2907%" y="437" width="0.0180%" height="15" fill="rgb(223,20,43)" fg:x="255" fg:w="2"/><text x="2.5407%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="2.2907%" y="421" width="0.0180%" height="15" fill="rgb(229,81,49)" fg:x="255" fg:w="2"/><text x="2.5407%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="2.2907%" y="405" width="0.0180%" height="15" fill="rgb(236,28,36)" fg:x="255" fg:w="2"/><text x="2.5407%" y="415.50"></text></g><g><title>&lt;std::fs::File as std::io::Seek&gt;::seek (14 samples, 0.13%)</title><rect x="2.3087%" y="581" width="0.1258%" height="15" fill="rgb(249,185,26)" fg:x="257" fg:w="14"/><text x="2.5587%" y="591.50"></text></g><g><title>std::sys::unix::fs::File::seek (14 samples, 0.13%)</title><rect x="2.3087%" y="565" width="0.1258%" height="15" fill="rgb(249,174,33)" fg:x="257" fg:w="14"/><text x="2.5587%" y="575.50"></text></g><g><title>__lseek64 (14 samples, 0.13%)</title><rect x="2.3087%" y="549" width="0.1258%" height="15" fill="rgb(233,201,37)" fg:x="257" fg:w="14"/><text x="2.5587%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="2.3895%" y="533" width="0.0449%" height="15" fill="rgb(221,78,26)" fg:x="266" fg:w="5"/><text x="2.6395%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="2.3895%" y="517" width="0.0449%" height="15" fill="rgb(250,127,30)" fg:x="266" fg:w="5"/><text x="2.6395%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="2.3985%" y="501" width="0.0359%" height="15" fill="rgb(230,49,44)" fg:x="267" fg:w="4"/><text x="2.6485%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="2.3985%" y="485" width="0.0359%" height="15" fill="rgb(229,67,23)" fg:x="267" fg:w="4"/><text x="2.6485%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="2.4165%" y="469" width="0.0180%" height="15" fill="rgb(249,83,47)" fg:x="269" fg:w="2"/><text x="2.6665%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="2.4165%" y="453" width="0.0180%" height="15" fill="rgb(215,43,3)" fg:x="269" fg:w="2"/><text x="2.6665%" y="463.50"></text></g><g><title>__calloc (60 samples, 0.54%)</title><rect x="2.4883%" y="565" width="0.5390%" height="15" fill="rgb(238,154,13)" fg:x="277" fg:w="60"/><text x="2.7383%" y="575.50"></text></g><g><title>_int_malloc (25 samples, 0.22%)</title><rect x="2.8027%" y="549" width="0.2246%" height="15" fill="rgb(219,56,2)" fg:x="312" fg:w="25"/><text x="3.0527%" y="559.50"></text></g><g><title>unlink_chunk.isra.0 (10 samples, 0.09%)</title><rect x="2.9375%" y="533" width="0.0898%" height="15" fill="rgb(233,0,4)" fg:x="327" fg:w="10"/><text x="3.1875%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="3.0273%" y="565" width="0.0269%" height="15" fill="rgb(235,30,7)" fg:x="337" fg:w="3"/><text x="3.2773%" y="575.50"></text></g><g><title>__rdl_alloc_zeroed (2 samples, 0.02%)</title><rect x="3.0543%" y="565" width="0.0180%" height="15" fill="rgb(250,79,13)" fg:x="340" fg:w="2"/><text x="3.3043%" y="575.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.11%)</title><rect x="3.0902%" y="533" width="0.1078%" height="15" fill="rgb(211,146,34)" fg:x="344" fg:w="12"/><text x="3.3402%" y="543.50"></text></g><g><title>_int_realloc (9 samples, 0.08%)</title><rect x="3.1171%" y="517" width="0.0808%" height="15" fill="rgb(228,22,38)" fg:x="347" fg:w="9"/><text x="3.3671%" y="527.50"></text></g><g><title>_int_malloc (5 samples, 0.04%)</title><rect x="3.1531%" y="501" width="0.0449%" height="15" fill="rgb(235,168,5)" fg:x="351" fg:w="5"/><text x="3.4031%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 0.13%)</title><rect x="3.0812%" y="565" width="0.1258%" height="15" fill="rgb(221,155,16)" fg:x="343" fg:w="14"/><text x="3.3312%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.13%)</title><rect x="3.0812%" y="549" width="0.1258%" height="15" fill="rgb(215,215,53)" fg:x="343" fg:w="14"/><text x="3.3312%" y="559.50"></text></g><g><title>[unknown] (33 samples, 0.30%)</title><rect x="3.3327%" y="469" width="0.2964%" height="15" fill="rgb(223,4,10)" fg:x="371" fg:w="33"/><text x="3.5827%" y="479.50"></text></g><g><title>[unknown] (33 samples, 0.30%)</title><rect x="3.3327%" y="453" width="0.2964%" height="15" fill="rgb(234,103,6)" fg:x="371" fg:w="33"/><text x="3.5827%" y="463.50"></text></g><g><title>[unknown] (33 samples, 0.30%)</title><rect x="3.3327%" y="437" width="0.2964%" height="15" fill="rgb(227,97,0)" fg:x="371" fg:w="33"/><text x="3.5827%" y="447.50"></text></g><g><title>[unknown] (29 samples, 0.26%)</title><rect x="3.3687%" y="421" width="0.2605%" height="15" fill="rgb(234,150,53)" fg:x="375" fg:w="29"/><text x="3.6187%" y="431.50"></text></g><g><title>[unknown] (29 samples, 0.26%)</title><rect x="3.3687%" y="405" width="0.2605%" height="15" fill="rgb(228,201,54)" fg:x="375" fg:w="29"/><text x="3.6187%" y="415.50"></text></g><g><title>[unknown] (28 samples, 0.25%)</title><rect x="3.3777%" y="389" width="0.2515%" height="15" fill="rgb(222,22,37)" fg:x="376" fg:w="28"/><text x="3.6277%" y="399.50"></text></g><g><title>[unknown] (25 samples, 0.22%)</title><rect x="3.4046%" y="373" width="0.2246%" height="15" fill="rgb(237,53,32)" fg:x="379" fg:w="25"/><text x="3.6546%" y="383.50"></text></g><g><title>[unknown] (24 samples, 0.22%)</title><rect x="3.4136%" y="357" width="0.2156%" height="15" fill="rgb(233,25,53)" fg:x="380" fg:w="24"/><text x="3.6636%" y="367.50"></text></g><g><title>[unknown] (23 samples, 0.21%)</title><rect x="3.4226%" y="341" width="0.2066%" height="15" fill="rgb(210,40,34)" fg:x="381" fg:w="23"/><text x="3.6726%" y="351.50"></text></g><g><title>[unknown] (23 samples, 0.21%)</title><rect x="3.4226%" y="325" width="0.2066%" height="15" fill="rgb(241,220,44)" fg:x="381" fg:w="23"/><text x="3.6726%" y="335.50"></text></g><g><title>[unknown] (10 samples, 0.09%)</title><rect x="3.5393%" y="309" width="0.0898%" height="15" fill="rgb(235,28,35)" fg:x="394" fg:w="10"/><text x="3.7893%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="3.6112%" y="293" width="0.0180%" height="15" fill="rgb(210,56,17)" fg:x="402" fg:w="2"/><text x="3.8612%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="3.6112%" y="277" width="0.0180%" height="15" fill="rgb(224,130,29)" fg:x="402" fg:w="2"/><text x="3.8612%" y="287.50"></text></g><g><title>yadb::storage::table::Table::get_datablock (149 samples, 1.34%)</title><rect x="2.3087%" y="597" width="1.3385%" height="15" fill="rgb(235,212,8)" fg:x="257" fg:w="149"/><text x="2.5587%" y="607.50"></text></g><g><title>yadb::storage::table::DataBlock::deserialize (135 samples, 1.21%)</title><rect x="2.4344%" y="581" width="1.2127%" height="15" fill="rgb(223,33,50)" fg:x="271" fg:w="135"/><text x="2.6844%" y="591.50"></text></g><g><title>std::io::default_read_exact (49 samples, 0.44%)</title><rect x="3.2070%" y="565" width="0.4402%" height="15" fill="rgb(219,149,13)" fg:x="357" fg:w="49"/><text x="3.4570%" y="575.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (48 samples, 0.43%)</title><rect x="3.2160%" y="549" width="0.4312%" height="15" fill="rgb(250,156,29)" fg:x="358" fg:w="48"/><text x="3.4660%" y="559.50"></text></g><g><title>std::sys::unix::fs::File::read (47 samples, 0.42%)</title><rect x="3.2249%" y="533" width="0.4222%" height="15" fill="rgb(216,193,19)" fg:x="359" fg:w="47"/><text x="3.4749%" y="543.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (47 samples, 0.42%)</title><rect x="3.2249%" y="517" width="0.4222%" height="15" fill="rgb(216,135,14)" fg:x="359" fg:w="47"/><text x="3.4749%" y="527.50"></text></g><g><title>__libc_read (47 samples, 0.42%)</title><rect x="3.2249%" y="501" width="0.4222%" height="15" fill="rgb(241,47,5)" fg:x="359" fg:w="47"/><text x="3.4749%" y="511.50"></text></g><g><title>__libc_read (47 samples, 0.42%)</title><rect x="3.2249%" y="485" width="0.4222%" height="15" fill="rgb(233,42,35)" fg:x="359" fg:w="47"/><text x="3.4749%" y="495.50"></text></g><g><title>__pthread_enable_asynccancel (2 samples, 0.02%)</title><rect x="3.6292%" y="469" width="0.0180%" height="15" fill="rgb(231,13,6)" fg:x="404" fg:w="2"/><text x="3.8792%" y="479.50"></text></g><g><title>&lt;std::fs::File as std::io::Seek&gt;::seek (29 samples, 0.26%)</title><rect x="3.9705%" y="581" width="0.2605%" height="15" fill="rgb(207,181,40)" fg:x="442" fg:w="29"/><text x="4.2205%" y="591.50"></text></g><g><title>std::sys::unix::fs::File::seek (29 samples, 0.26%)</title><rect x="3.9705%" y="565" width="0.2605%" height="15" fill="rgb(254,173,49)" fg:x="442" fg:w="29"/><text x="4.2205%" y="575.50"></text></g><g><title>__lseek64 (29 samples, 0.26%)</title><rect x="3.9705%" y="549" width="0.2605%" height="15" fill="rgb(221,1,38)" fg:x="442" fg:w="29"/><text x="4.2205%" y="559.50"></text></g><g><title>[unknown] (12 samples, 0.11%)</title><rect x="4.1232%" y="533" width="0.1078%" height="15" fill="rgb(206,124,46)" fg:x="459" fg:w="12"/><text x="4.3732%" y="543.50"></text></g><g><title>[unknown] (12 samples, 0.11%)</title><rect x="4.1232%" y="517" width="0.1078%" height="15" fill="rgb(249,21,11)" fg:x="459" fg:w="12"/><text x="4.3732%" y="527.50"></text></g><g><title>[unknown] (12 samples, 0.11%)</title><rect x="4.1232%" y="501" width="0.1078%" height="15" fill="rgb(222,201,40)" fg:x="459" fg:w="12"/><text x="4.3732%" y="511.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="4.1592%" y="485" width="0.0719%" height="15" fill="rgb(235,61,29)" fg:x="463" fg:w="8"/><text x="4.4092%" y="495.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="4.1682%" y="469" width="0.0629%" height="15" fill="rgb(219,207,3)" fg:x="464" fg:w="7"/><text x="4.4182%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="4.1861%" y="453" width="0.0449%" height="15" fill="rgb(222,56,46)" fg:x="466" fg:w="5"/><text x="4.4361%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="4.2041%" y="437" width="0.0269%" height="15" fill="rgb(239,76,54)" fg:x="468" fg:w="3"/><text x="4.4541%" y="447.50"></text></g><g><title>__calloc (266 samples, 2.39%)</title><rect x="4.2310%" y="581" width="2.3895%" height="15" fill="rgb(231,124,27)" fg:x="471" fg:w="266"/><text x="4.4810%" y="591.50">__..</text></g><g><title>_int_malloc (151 samples, 1.36%)</title><rect x="5.2641%" y="565" width="1.3564%" height="15" fill="rgb(249,195,6)" fg:x="586" fg:w="151"/><text x="5.5141%" y="575.50"></text></g><g><title>unlink_chunk.isra.0 (90 samples, 0.81%)</title><rect x="5.8121%" y="549" width="0.8085%" height="15" fill="rgb(237,174,47)" fg:x="647" fg:w="90"/><text x="6.0621%" y="559.50"></text></g><g><title>__rdl_alloc_zeroed (2 samples, 0.02%)</title><rect x="6.6206%" y="581" width="0.0180%" height="15" fill="rgb(206,201,31)" fg:x="737" fg:w="2"/><text x="6.8706%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="6.7463%" y="517" width="0.0269%" height="15" fill="rgb(231,57,52)" fg:x="751" fg:w="3"/><text x="6.9963%" y="527.50"></text></g><g><title>malloc_consolidate (60 samples, 0.54%)</title><rect x="7.3302%" y="501" width="0.5390%" height="15" fill="rgb(248,177,22)" fg:x="816" fg:w="60"/><text x="7.5802%" y="511.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.04%)</title><rect x="7.8333%" y="485" width="0.0359%" height="15" fill="rgb(215,211,37)" fg:x="872" fg:w="4"/><text x="8.0833%" y="495.50"></text></g><g><title>__GI___libc_realloc (137 samples, 1.23%)</title><rect x="6.6745%" y="549" width="1.2307%" height="15" fill="rgb(241,128,51)" fg:x="743" fg:w="137"/><text x="6.9245%" y="559.50"></text></g><g><title>_int_realloc (132 samples, 1.19%)</title><rect x="6.7194%" y="533" width="1.1858%" height="15" fill="rgb(227,165,31)" fg:x="748" fg:w="132"/><text x="6.9694%" y="543.50"></text></g><g><title>_int_malloc (126 samples, 1.13%)</title><rect x="6.7733%" y="517" width="1.1319%" height="15" fill="rgb(228,167,24)" fg:x="754" fg:w="126"/><text x="7.0233%" y="527.50"></text></g><g><title>unlink_chunk.isra.0 (4 samples, 0.04%)</title><rect x="7.8692%" y="501" width="0.0359%" height="15" fill="rgb(228,143,12)" fg:x="876" fg:w="4"/><text x="8.1192%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (142 samples, 1.28%)</title><rect x="6.6475%" y="581" width="1.2756%" height="15" fill="rgb(249,149,8)" fg:x="740" fg:w="142"/><text x="6.8975%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (140 samples, 1.26%)</title><rect x="6.6655%" y="565" width="1.2576%" height="15" fill="rgb(243,35,44)" fg:x="742" fg:w="140"/><text x="6.9155%" y="575.50"></text></g><g><title>[unknown] (5,402 samples, 48.53%)</title><rect x="46.2720%" y="485" width="48.5268%" height="15" fill="rgb(246,89,9)" fg:x="5151" fg:w="5402"/><text x="46.5220%" y="495.50">[unknown]</text></g><g><title>[unknown] (5,402 samples, 48.53%)</title><rect x="46.2720%" y="469" width="48.5268%" height="15" fill="rgb(233,213,13)" fg:x="5151" fg:w="5402"/><text x="46.5220%" y="479.50">[unknown]</text></g><g><title>[unknown] (5,273 samples, 47.37%)</title><rect x="47.4308%" y="453" width="47.3679%" height="15" fill="rgb(233,141,41)" fg:x="5280" fg:w="5273"/><text x="47.6808%" y="463.50">[unknown]</text></g><g><title>[unknown] (3,829 samples, 34.40%)</title><rect x="60.4024%" y="437" width="34.3963%" height="15" fill="rgb(239,167,4)" fg:x="6724" fg:w="3829"/><text x="60.6524%" y="447.50">[unknown]</text></g><g><title>[unknown] (3,654 samples, 32.82%)</title><rect x="61.9745%" y="421" width="32.8243%" height="15" fill="rgb(209,217,16)" fg:x="6899" fg:w="3654"/><text x="62.2245%" y="431.50">[unknown]</text></g><g><title>[unknown] (3,170 samples, 28.48%)</title><rect x="66.3223%" y="405" width="28.4765%" height="15" fill="rgb(219,88,35)" fg:x="7383" fg:w="3170"/><text x="66.5723%" y="415.50">[unknown]</text></g><g><title>[unknown] (2,750 samples, 24.70%)</title><rect x="70.0952%" y="389" width="24.7036%" height="15" fill="rgb(220,193,23)" fg:x="7803" fg:w="2750"/><text x="70.3452%" y="399.50">[unknown]</text></g><g><title>[unknown] (2,012 samples, 18.07%)</title><rect x="76.7248%" y="373" width="18.0740%" height="15" fill="rgb(230,90,52)" fg:x="8541" fg:w="2012"/><text x="76.9748%" y="383.50">[unknown]</text></g><g><title>[unknown] (1,639 samples, 14.72%)</title><rect x="80.0755%" y="357" width="14.7233%" height="15" fill="rgb(252,106,19)" fg:x="8914" fg:w="1639"/><text x="80.3255%" y="367.50">[unknown]</text></g><g><title>[unknown] (1,300 samples, 11.68%)</title><rect x="83.1207%" y="341" width="11.6780%" height="15" fill="rgb(206,74,20)" fg:x="9253" fg:w="1300"/><text x="83.3707%" y="351.50">[unknown]</text></g><g><title>[unknown] (592 samples, 5.32%)</title><rect x="89.4808%" y="325" width="5.3180%" height="15" fill="rgb(230,138,44)" fg:x="9961" fg:w="592"/><text x="89.7308%" y="335.50">[unknow..</text></g><g><title>[unknown] (282 samples, 2.53%)</title><rect x="92.2655%" y="309" width="2.5332%" height="15" fill="rgb(235,182,43)" fg:x="10271" fg:w="282"/><text x="92.5155%" y="319.50">[u..</text></g><g><title>[unknown] (94 samples, 0.84%)</title><rect x="93.9544%" y="293" width="0.8444%" height="15" fill="rgb(242,16,51)" fg:x="10459" fg:w="94"/><text x="94.2044%" y="303.50"></text></g><g><title>[unknown] (25 samples, 0.22%)</title><rect x="94.5742%" y="277" width="0.2246%" height="15" fill="rgb(248,9,4)" fg:x="10528" fg:w="25"/><text x="94.8242%" y="287.50"></text></g><g><title>[unknown] (22 samples, 0.20%)</title><rect x="94.6011%" y="261" width="0.1976%" height="15" fill="rgb(210,31,22)" fg:x="10531" fg:w="22"/><text x="94.8511%" y="271.50"></text></g><g><title>[unknown] (19 samples, 0.17%)</title><rect x="94.6281%" y="245" width="0.1707%" height="15" fill="rgb(239,54,39)" fg:x="10534" fg:w="19"/><text x="94.8781%" y="255.50"></text></g><g><title>[unknown] (18 samples, 0.16%)</title><rect x="94.6371%" y="229" width="0.1617%" height="15" fill="rgb(230,99,41)" fg:x="10535" fg:w="18"/><text x="94.8871%" y="239.50"></text></g><g><title>[unknown] (17 samples, 0.15%)</title><rect x="94.6461%" y="213" width="0.1527%" height="15" fill="rgb(253,106,12)" fg:x="10536" fg:w="17"/><text x="94.8961%" y="223.50"></text></g><g><title>[unknown] (16 samples, 0.14%)</title><rect x="94.6550%" y="197" width="0.1437%" height="15" fill="rgb(213,46,41)" fg:x="10537" fg:w="16"/><text x="94.9050%" y="207.50"></text></g><g><title>[unknown] (12 samples, 0.11%)</title><rect x="94.6910%" y="181" width="0.1078%" height="15" fill="rgb(215,133,35)" fg:x="10541" fg:w="12"/><text x="94.9410%" y="191.50"></text></g><g><title>[unknown] (10 samples, 0.09%)</title><rect x="94.7089%" y="165" width="0.0898%" height="15" fill="rgb(213,28,5)" fg:x="10543" fg:w="10"/><text x="94.9589%" y="175.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="94.7269%" y="149" width="0.0719%" height="15" fill="rgb(215,77,49)" fg:x="10545" fg:w="8"/><text x="94.9769%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="94.7449%" y="133" width="0.0539%" height="15" fill="rgb(248,100,22)" fg:x="10547" fg:w="6"/><text x="94.9949%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="94.7539%" y="117" width="0.0449%" height="15" fill="rgb(208,67,9)" fg:x="10548" fg:w="5"/><text x="95.0039%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="94.7718%" y="101" width="0.0269%" height="15" fill="rgb(219,133,21)" fg:x="10550" fg:w="3"/><text x="95.0218%" y="111.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="94.7718%" y="85" width="0.0269%" height="15" fill="rgb(246,46,29)" fg:x="10550" fg:w="3"/><text x="95.0218%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="94.7808%" y="69" width="0.0180%" height="15" fill="rgb(246,185,52)" fg:x="10551" fg:w="2"/><text x="95.0308%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="94.7808%" y="53" width="0.0180%" height="15" fill="rgb(252,136,11)" fg:x="10551" fg:w="2"/><text x="95.0308%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="94.7808%" y="37" width="0.0180%" height="15" fill="rgb(219,138,53)" fg:x="10551" fg:w="2"/><text x="95.0308%" y="47.50"></text></g><g><title>__pthread_disable_asynccancel (106 samples, 0.95%)</title><rect x="94.7988%" y="485" width="0.9522%" height="15" fill="rgb(211,51,23)" fg:x="10553" fg:w="106"/><text x="95.0488%" y="495.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (9,839 samples, 88.38%)</title><rect x="8.2106%" y="565" width="88.3848%" height="15" fill="rgb(247,221,28)" fg:x="914" fg:w="9839"/><text x="8.4606%" y="575.50">&lt;&amp;std::fs::File as std::io::Read&gt;::read</text></g><g><title>std::sys::unix::fs::File::read (9,829 samples, 88.30%)</title><rect x="8.3004%" y="549" width="88.2950%" height="15" fill="rgb(251,222,45)" fg:x="924" fg:w="9829"/><text x="8.5504%" y="559.50">std::sys::unix::fs::File::read</text></g><g><title>std::sys::unix::fd::FileDesc::read (9,829 samples, 88.30%)</title><rect x="8.3004%" y="533" width="88.2950%" height="15" fill="rgb(217,162,53)" fg:x="924" fg:w="9829"/><text x="8.5504%" y="543.50">std::sys::unix::fd::FileDesc::read</text></g><g><title>__libc_read (9,821 samples, 88.22%)</title><rect x="8.3723%" y="517" width="88.2231%" height="15" fill="rgb(229,93,14)" fg:x="932" fg:w="9821"/><text x="8.6223%" y="527.50">__libc_read</text></g><g><title>__libc_read (9,806 samples, 88.09%)</title><rect x="8.5070%" y="501" width="88.0884%" height="15" fill="rgb(209,67,49)" fg:x="947" fg:w="9806"/><text x="8.7570%" y="511.50">__libc_read</text></g><g><title>__pthread_enable_asynccancel (94 samples, 0.84%)</title><rect x="95.7510%" y="485" width="0.8444%" height="15" fill="rgb(213,87,29)" fg:x="10659" fg:w="94"/><text x="96.0010%" y="495.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (9 samples, 0.08%)</title><rect x="96.5954%" y="565" width="0.0808%" height="15" fill="rgb(205,151,52)" fg:x="10753" fg:w="9"/><text x="96.8454%" y="575.50"></text></g><g><title>std::sys::unix::fs::File::read (9 samples, 0.08%)</title><rect x="96.5954%" y="549" width="0.0808%" height="15" fill="rgb(253,215,39)" fg:x="10753" fg:w="9"/><text x="96.8454%" y="559.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (9 samples, 0.08%)</title><rect x="96.5954%" y="533" width="0.0808%" height="15" fill="rgb(221,220,41)" fg:x="10753" fg:w="9"/><text x="96.8454%" y="543.50"></text></g><g><title>__libc_read (9 samples, 0.08%)</title><rect x="96.5954%" y="517" width="0.0808%" height="15" fill="rgb(218,133,21)" fg:x="10753" fg:w="9"/><text x="96.8454%" y="527.50"></text></g><g><title>__libc_read (9 samples, 0.08%)</title><rect x="96.5954%" y="501" width="0.0808%" height="15" fill="rgb(221,193,43)" fg:x="10753" fg:w="9"/><text x="96.8454%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="96.6403%" y="485" width="0.0359%" height="15" fill="rgb(240,128,52)" fg:x="10758" fg:w="4"/><text x="96.8903%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="96.6403%" y="469" width="0.0359%" height="15" fill="rgb(253,114,12)" fg:x="10758" fg:w="4"/><text x="96.8903%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="96.6403%" y="453" width="0.0359%" height="15" fill="rgb(215,223,47)" fg:x="10758" fg:w="4"/><text x="96.8903%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="96.6493%" y="437" width="0.0269%" height="15" fill="rgb(248,225,23)" fg:x="10759" fg:w="3"/><text x="96.8993%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="96.6583%" y="421" width="0.0180%" height="15" fill="rgb(250,108,0)" fg:x="10760" fg:w="2"/><text x="96.9083%" y="431.50"></text></g><g><title>yadb::storage::table::Table::get_index (10,357 samples, 93.04%)</title><rect x="3.6471%" y="597" width="93.0381%" height="15" fill="rgb(228,208,7)" fg:x="406" fg:w="10357"/><text x="3.8971%" y="607.50">yadb::storage::table::Table::get_index</text></g><g><title>std::io::default_read_exact (9,881 samples, 88.76%)</title><rect x="7.9231%" y="581" width="88.7621%" height="15" fill="rgb(244,45,10)" fg:x="882" fg:w="9881"/><text x="8.1731%" y="591.50">std::io::default_read_exact</text></g><g><title>&lt;std::fs::File as std::io::Seek&gt;::seek (22 samples, 0.20%)</title><rect x="96.6942%" y="581" width="0.1976%" height="15" fill="rgb(207,125,25)" fg:x="10764" fg:w="22"/><text x="96.9442%" y="591.50"></text></g><g><title>std::sys::unix::fs::File::seek (21 samples, 0.19%)</title><rect x="96.7032%" y="565" width="0.1886%" height="15" fill="rgb(210,195,18)" fg:x="10765" fg:w="21"/><text x="96.9532%" y="575.50"></text></g><g><title>__lseek64 (21 samples, 0.19%)</title><rect x="96.7032%" y="549" width="0.1886%" height="15" fill="rgb(249,80,12)" fg:x="10765" fg:w="21"/><text x="96.9532%" y="559.50"></text></g><g><title>[unknown] (11 samples, 0.10%)</title><rect x="96.7930%" y="533" width="0.0988%" height="15" fill="rgb(221,65,9)" fg:x="10775" fg:w="11"/><text x="97.0430%" y="543.50"></text></g><g><title>[unknown] (11 samples, 0.10%)</title><rect x="96.7930%" y="517" width="0.0988%" height="15" fill="rgb(235,49,36)" fg:x="10775" fg:w="11"/><text x="97.0430%" y="527.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="96.8110%" y="501" width="0.0808%" height="15" fill="rgb(225,32,20)" fg:x="10777" fg:w="9"/><text x="97.0610%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="96.8469%" y="485" width="0.0449%" height="15" fill="rgb(215,141,46)" fg:x="10781" fg:w="5"/><text x="97.0969%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="96.8469%" y="469" width="0.0449%" height="15" fill="rgb(250,160,47)" fg:x="10781" fg:w="5"/><text x="97.0969%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="96.8739%" y="453" width="0.0180%" height="15" fill="rgb(216,222,40)" fg:x="10784" fg:w="2"/><text x="97.1239%" y="463.50"></text></g><g><title>[unknown] (63 samples, 0.57%)</title><rect x="96.9278%" y="437" width="0.5659%" height="15" fill="rgb(234,217,39)" fg:x="10790" fg:w="63"/><text x="97.1778%" y="447.50"></text></g><g><title>[unknown] (63 samples, 0.57%)</title><rect x="96.9278%" y="421" width="0.5659%" height="15" fill="rgb(207,178,40)" fg:x="10790" fg:w="63"/><text x="97.1778%" y="431.50"></text></g><g><title>[unknown] (62 samples, 0.56%)</title><rect x="96.9368%" y="405" width="0.5570%" height="15" fill="rgb(221,136,13)" fg:x="10791" fg:w="62"/><text x="97.1868%" y="415.50"></text></g><g><title>[unknown] (55 samples, 0.49%)</title><rect x="96.9996%" y="389" width="0.4941%" height="15" fill="rgb(249,199,10)" fg:x="10798" fg:w="55"/><text x="97.2496%" y="399.50"></text></g><g><title>[unknown] (52 samples, 0.47%)</title><rect x="97.0266%" y="373" width="0.4671%" height="15" fill="rgb(249,222,13)" fg:x="10801" fg:w="52"/><text x="97.2766%" y="383.50"></text></g><g><title>[unknown] (51 samples, 0.46%)</title><rect x="97.0356%" y="357" width="0.4581%" height="15" fill="rgb(244,185,38)" fg:x="10802" fg:w="51"/><text x="97.2856%" y="367.50"></text></g><g><title>[unknown] (51 samples, 0.46%)</title><rect x="97.0356%" y="341" width="0.4581%" height="15" fill="rgb(236,202,9)" fg:x="10802" fg:w="51"/><text x="97.2856%" y="351.50"></text></g><g><title>[unknown] (45 samples, 0.40%)</title><rect x="97.0895%" y="325" width="0.4042%" height="15" fill="rgb(250,229,37)" fg:x="10808" fg:w="45"/><text x="97.3395%" y="335.50"></text></g><g><title>[unknown] (33 samples, 0.30%)</title><rect x="97.1973%" y="309" width="0.2964%" height="15" fill="rgb(206,174,23)" fg:x="10820" fg:w="33"/><text x="97.4473%" y="319.50"></text></g><g><title>[unknown] (22 samples, 0.20%)</title><rect x="97.2961%" y="293" width="0.1976%" height="15" fill="rgb(211,33,43)" fg:x="10831" fg:w="22"/><text x="97.5461%" y="303.50"></text></g><g><title>[unknown] (11 samples, 0.10%)</title><rect x="97.3949%" y="277" width="0.0988%" height="15" fill="rgb(245,58,50)" fg:x="10842" fg:w="11"/><text x="97.6449%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="97.4398%" y="261" width="0.0539%" height="15" fill="rgb(244,68,36)" fg:x="10847" fg:w="6"/><text x="97.6898%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="97.4488%" y="245" width="0.0449%" height="15" fill="rgb(232,229,15)" fg:x="10848" fg:w="5"/><text x="97.6988%" y="255.50"></text></g><g><title>std::fs::OpenOptions::_open (68 samples, 0.61%)</title><rect x="96.8918%" y="581" width="0.6109%" height="15" fill="rgb(254,30,23)" fg:x="10786" fg:w="68"/><text x="97.1418%" y="591.50"></text></g><g><title>std::sys::unix::fs::File::open (67 samples, 0.60%)</title><rect x="96.9008%" y="565" width="0.6019%" height="15" fill="rgb(235,160,14)" fg:x="10787" fg:w="67"/><text x="97.1508%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (67 samples, 0.60%)</title><rect x="96.9008%" y="549" width="0.6019%" height="15" fill="rgb(212,155,44)" fg:x="10787" fg:w="67"/><text x="97.1508%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (67 samples, 0.60%)</title><rect x="96.9008%" y="533" width="0.6019%" height="15" fill="rgb(226,2,50)" fg:x="10787" fg:w="67"/><text x="97.1508%" y="543.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (67 samples, 0.60%)</title><rect x="96.9008%" y="517" width="0.6019%" height="15" fill="rgb(234,177,6)" fg:x="10787" fg:w="67"/><text x="97.1508%" y="527.50"></text></g><g><title>std::sys::unix::fs::File::open_c (67 samples, 0.60%)</title><rect x="96.9008%" y="501" width="0.6019%" height="15" fill="rgb(217,24,9)" fg:x="10787" fg:w="67"/><text x="97.1508%" y="511.50"></text></g><g><title>std::sys::unix::cvt_r (67 samples, 0.60%)</title><rect x="96.9008%" y="485" width="0.6019%" height="15" fill="rgb(220,13,46)" fg:x="10787" fg:w="67"/><text x="97.1508%" y="495.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (67 samples, 0.60%)</title><rect x="96.9008%" y="469" width="0.6019%" height="15" fill="rgb(239,221,27)" fg:x="10787" fg:w="67"/><text x="97.1508%" y="479.50"></text></g><g><title>__libc_open64 (67 samples, 0.60%)</title><rect x="96.9008%" y="453" width="0.6019%" height="15" fill="rgb(222,198,25)" fg:x="10787" fg:w="67"/><text x="97.1508%" y="463.50"></text></g><g><title>yadb::storage::table::Table::new (98 samples, 0.88%)</title><rect x="96.6852%" y="597" width="0.8803%" height="15" fill="rgb(211,99,13)" fg:x="10763" fg:w="98"/><text x="96.9352%" y="607.50"></text></g><g><title>std::io::default_read_exact (6 samples, 0.05%)</title><rect x="97.5117%" y="581" width="0.0539%" height="15" fill="rgb(232,111,31)" fg:x="10855" fg:w="6"/><text x="97.7617%" y="591.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (6 samples, 0.05%)</title><rect x="97.5117%" y="565" width="0.0539%" height="15" fill="rgb(245,82,37)" fg:x="10855" fg:w="6"/><text x="97.7617%" y="575.50"></text></g><g><title>std::sys::unix::fs::File::read (6 samples, 0.05%)</title><rect x="97.5117%" y="549" width="0.0539%" height="15" fill="rgb(227,149,46)" fg:x="10855" fg:w="6"/><text x="97.7617%" y="559.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (6 samples, 0.05%)</title><rect x="97.5117%" y="533" width="0.0539%" height="15" fill="rgb(218,36,50)" fg:x="10855" fg:w="6"/><text x="97.7617%" y="543.50"></text></g><g><title>__libc_read (6 samples, 0.05%)</title><rect x="97.5117%" y="517" width="0.0539%" height="15" fill="rgb(226,80,48)" fg:x="10855" fg:w="6"/><text x="97.7617%" y="527.50"></text></g><g><title>__libc_read (6 samples, 0.05%)</title><rect x="97.5117%" y="501" width="0.0539%" height="15" fill="rgb(238,224,15)" fg:x="10855" fg:w="6"/><text x="97.7617%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="97.5296%" y="485" width="0.0359%" height="15" fill="rgb(241,136,10)" fg:x="10857" fg:w="4"/><text x="97.7796%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="97.5296%" y="469" width="0.0359%" height="15" fill="rgb(208,32,45)" fg:x="10857" fg:w="4"/><text x="97.7796%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="97.5296%" y="453" width="0.0359%" height="15" fill="rgb(207,135,9)" fg:x="10857" fg:w="4"/><text x="97.7796%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="97.5386%" y="437" width="0.0269%" height="15" fill="rgb(206,86,44)" fg:x="10858" fg:w="3"/><text x="97.7886%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="97.5386%" y="421" width="0.0269%" height="15" fill="rgb(245,177,15)" fg:x="10858" fg:w="3"/><text x="97.7886%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="97.5386%" y="405" width="0.0269%" height="15" fill="rgb(206,64,50)" fg:x="10858" fg:w="3"/><text x="97.7886%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="97.5386%" y="389" width="0.0269%" height="15" fill="rgb(234,36,40)" fg:x="10858" fg:w="3"/><text x="97.7886%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="97.5386%" y="373" width="0.0269%" height="15" fill="rgb(213,64,8)" fg:x="10858" fg:w="3"/><text x="97.7886%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="97.5386%" y="357" width="0.0269%" height="15" fill="rgb(210,75,36)" fg:x="10858" fg:w="3"/><text x="97.7886%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="97.5386%" y="341" width="0.0269%" height="15" fill="rgb(229,88,21)" fg:x="10858" fg:w="3"/><text x="97.7886%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.5476%" y="325" width="0.0180%" height="15" fill="rgb(252,204,47)" fg:x="10859" fg:w="2"/><text x="97.7976%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.5476%" y="309" width="0.0180%" height="15" fill="rgb(208,77,27)" fg:x="10859" fg:w="2"/><text x="97.7976%" y="319.50"></text></g><g><title>yadb::storage::Tree::get::_{{closure}} (10,767 samples, 96.72%)</title><rect x="0.9073%" y="629" width="96.7212%" height="15" fill="rgb(221,76,26)" fg:x="101" fg:w="10767"/><text x="1.1573%" y="639.50">yadb::storage::Tree::get::_{{closure}}</text></g><g><title>yadb::storage::Tree::search_table (10,738 samples, 96.46%)</title><rect x="1.1678%" y="613" width="96.4607%" height="15" fill="rgb(225,139,18)" fg:x="130" fg:w="10738"/><text x="1.4178%" y="623.50">yadb::storage::Tree::search_table</text></g><g><title>yadb::storage::table::search_index (7 samples, 0.06%)</title><rect x="97.5656%" y="597" width="0.0629%" height="15" fill="rgb(230,137,11)" fg:x="10861" fg:w="7"/><text x="97.8156%" y="607.50"></text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.04%)</title><rect x="97.5835%" y="581" width="0.0449%" height="15" fill="rgb(212,28,1)" fg:x="10863" fg:w="5"/><text x="97.8335%" y="591.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="97.6734%" y="613" width="0.0180%" height="15" fill="rgb(248,164,17)" fg:x="10873" fg:w="2"/><text x="97.9234%" y="623.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="97.6913%" y="613" width="0.0180%" height="15" fill="rgb(222,171,42)" fg:x="10875" fg:w="2"/><text x="97.9413%" y="623.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="97.7093%" y="613" width="0.0180%" height="15" fill="rgb(243,84,45)" fg:x="10877" fg:w="2"/><text x="97.9593%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.02%)</title><rect x="97.7452%" y="613" width="0.0180%" height="15" fill="rgb(252,49,23)" fg:x="10881" fg:w="2"/><text x="97.9952%" y="623.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (2 samples, 0.02%)</title><rect x="97.7632%" y="613" width="0.0180%" height="15" fill="rgb(215,19,7)" fg:x="10883" fg:w="2"/><text x="98.0132%" y="623.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (4 samples, 0.04%)</title><rect x="97.7812%" y="613" width="0.0359%" height="15" fill="rgb(238,81,41)" fg:x="10885" fg:w="4"/><text x="98.0312%" y="623.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.02%)</title><rect x="97.7991%" y="597" width="0.0180%" height="15" fill="rgb(210,199,37)" fg:x="10887" fg:w="2"/><text x="98.0491%" y="607.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (2 samples, 0.02%)</title><rect x="97.7991%" y="581" width="0.0180%" height="15" fill="rgb(244,192,49)" fg:x="10887" fg:w="2"/><text x="98.0491%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.04%)</title><rect x="97.8261%" y="581" width="0.0449%" height="15" fill="rgb(226,211,11)" fg:x="10890" fg:w="5"/><text x="98.0761%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="97.8710%" y="581" width="0.0269%" height="15" fill="rgb(236,162,54)" fg:x="10895" fg:w="3"/><text x="98.1210%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="97.8710%" y="565" width="0.0269%" height="15" fill="rgb(220,229,9)" fg:x="10895" fg:w="3"/><text x="98.1210%" y="575.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.03%)</title><rect x="97.8710%" y="549" width="0.0269%" height="15" fill="rgb(250,87,22)" fg:x="10895" fg:w="3"/><text x="98.1210%" y="559.50"></text></g><g><title>_int_realloc (3 samples, 0.03%)</title><rect x="97.8710%" y="533" width="0.0269%" height="15" fill="rgb(239,43,17)" fg:x="10895" fg:w="3"/><text x="98.1210%" y="543.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="97.8710%" y="517" width="0.0269%" height="15" fill="rgb(231,177,25)" fg:x="10895" fg:w="3"/><text x="98.1210%" y="527.50"></text></g><g><title>bit_vec::BitVec&lt;B&gt;::to_bytes (3 samples, 0.03%)</title><rect x="97.8980%" y="581" width="0.0269%" height="15" fill="rgb(219,179,1)" fg:x="10898" fg:w="3"/><text x="98.1480%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.03%)</title><rect x="97.8980%" y="565" width="0.0269%" height="15" fill="rgb(238,219,53)" fg:x="10898" fg:w="3"/><text x="98.1480%" y="575.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="97.9069%" y="549" width="0.0180%" height="15" fill="rgb(232,167,36)" fg:x="10899" fg:w="2"/><text x="98.1569%" y="559.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="97.9069%" y="533" width="0.0180%" height="15" fill="rgb(244,19,51)" fg:x="10899" fg:w="2"/><text x="98.1569%" y="543.50"></text></g><g><title>malloc_consolidate (2 samples, 0.02%)</title><rect x="97.9069%" y="517" width="0.0180%" height="15" fill="rgb(224,6,22)" fg:x="10899" fg:w="2"/><text x="98.1569%" y="527.50"></text></g><g><title>bloomfilter::Bloom&lt;T&gt;::set (2 samples, 0.02%)</title><rect x="97.9249%" y="581" width="0.0180%" height="15" fill="rgb(224,145,5)" fg:x="10901" fg:w="2"/><text x="98.1749%" y="591.50"></text></g><g><title>yadb::storage::Tree::write_skipmap_as_sstable (16 samples, 0.14%)</title><rect x="97.8171%" y="613" width="0.1437%" height="15" fill="rgb(234,130,49)" fg:x="10889" fg:w="16"/><text x="98.0671%" y="623.50"></text></g><g><title>yadb::storage::table::Table::write_table (15 samples, 0.13%)</title><rect x="97.8261%" y="597" width="0.1347%" height="15" fill="rgb(254,6,2)" fg:x="10890" fg:w="15"/><text x="98.0761%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.02%)</title><rect x="97.9429%" y="581" width="0.0180%" height="15" fill="rgb(208,96,46)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="591.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (2 samples, 0.02%)</title><rect x="97.9429%" y="565" width="0.0180%" height="15" fill="rgb(239,3,39)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::write (2 samples, 0.02%)</title><rect x="97.9429%" y="549" width="0.0180%" height="15" fill="rgb(233,210,1)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="559.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 0.02%)</title><rect x="97.9429%" y="533" width="0.0180%" height="15" fill="rgb(244,137,37)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="543.50"></text></g><g><title>__libc_write (2 samples, 0.02%)</title><rect x="97.9429%" y="517" width="0.0180%" height="15" fill="rgb(240,136,2)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="527.50"></text></g><g><title>__libc_write (2 samples, 0.02%)</title><rect x="97.9429%" y="501" width="0.0180%" height="15" fill="rgb(239,18,37)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.9429%" y="485" width="0.0180%" height="15" fill="rgb(218,185,22)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.9429%" y="469" width="0.0180%" height="15" fill="rgb(225,218,4)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.9429%" y="453" width="0.0180%" height="15" fill="rgb(230,182,32)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.9429%" y="437" width="0.0180%" height="15" fill="rgb(242,56,43)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.9429%" y="421" width="0.0180%" height="15" fill="rgb(233,99,24)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.9429%" y="405" width="0.0180%" height="15" fill="rgb(234,209,42)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.9429%" y="389" width="0.0180%" height="15" fill="rgb(227,7,12)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.9429%" y="373" width="0.0180%" height="15" fill="rgb(245,203,43)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.9429%" y="357" width="0.0180%" height="15" fill="rgb(238,205,33)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.9429%" y="341" width="0.0180%" height="15" fill="rgb(231,56,7)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.9429%" y="325" width="0.0180%" height="15" fill="rgb(244,186,29)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.9429%" y="309" width="0.0180%" height="15" fill="rgb(234,111,31)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="97.9429%" y="293" width="0.0180%" height="15" fill="rgb(241,149,10)" fg:x="10903" fg:w="2"/><text x="98.1929%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="97.9698%" y="597" width="0.0359%" height="15" fill="rgb(249,206,44)" fg:x="10906" fg:w="4"/><text x="98.2198%" y="607.50"></text></g><g><title>crossbeam_skiplist::map::SkipMap&lt;K,V&gt;::contains_key (27 samples, 0.24%)</title><rect x="98.0147%" y="597" width="0.2425%" height="15" fill="rgb(251,153,30)" fg:x="10911" fg:w="27"/><text x="98.2647%" y="607.50"></text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::search_bound (24 samples, 0.22%)</title><rect x="98.0417%" y="581" width="0.2156%" height="15" fill="rgb(239,152,38)" fg:x="10914" fg:w="24"/><text x="98.2917%" y="591.50"></text></g><g><title>__memcmp_avx2_movbe (13 samples, 0.12%)</title><rect x="98.1405%" y="565" width="0.1168%" height="15" fill="rgb(249,139,47)" fg:x="10925" fg:w="13"/><text x="98.3905%" y="575.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.04%)</title><rect x="98.2663%" y="565" width="0.0449%" height="15" fill="rgb(244,64,35)" fg:x="10939" fg:w="5"/><text x="98.5163%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.02%)</title><rect x="98.3112%" y="565" width="0.0180%" height="15" fill="rgb(216,46,15)" fg:x="10944" fg:w="2"/><text x="98.5612%" y="575.50"></text></g><g><title>__memcmp_avx2_movbe (3 samples, 0.03%)</title><rect x="98.3741%" y="549" width="0.0269%" height="15" fill="rgb(250,74,19)" fg:x="10951" fg:w="3"/><text x="98.6241%" y="559.50"></text></g><g><title>yadb::storage::memtable::Memtable::insert_or_delete (50 samples, 0.45%)</title><rect x="97.9608%" y="613" width="0.4492%" height="15" fill="rgb(249,42,33)" fg:x="10905" fg:w="50"/><text x="98.2108%" y="623.50"></text></g><g><title>crossbeam_skiplist::map::SkipMap&lt;K,V&gt;::insert (16 samples, 0.14%)</title><rect x="98.2663%" y="597" width="0.1437%" height="15" fill="rgb(242,149,17)" fg:x="10939" fg:w="16"/><text x="98.5163%" y="607.50"></text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::insert_internal (16 samples, 0.14%)</title><rect x="98.2663%" y="581" width="0.1437%" height="15" fill="rgb(244,29,21)" fg:x="10939" fg:w="16"/><text x="98.5163%" y="591.50"></text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::search_position (9 samples, 0.08%)</title><rect x="98.3291%" y="565" width="0.0808%" height="15" fill="rgb(220,130,37)" fg:x="10946" fg:w="9"/><text x="98.5791%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.04%)</title><rect x="98.4190%" y="581" width="0.0359%" height="15" fill="rgb(211,67,2)" fg:x="10956" fg:w="4"/><text x="98.6690%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="98.4369%" y="565" width="0.0180%" height="15" fill="rgb(235,68,52)" fg:x="10958" fg:w="2"/><text x="98.6869%" y="575.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.02%)</title><rect x="98.4369%" y="549" width="0.0180%" height="15" fill="rgb(246,142,3)" fg:x="10958" fg:w="2"/><text x="98.6869%" y="559.50"></text></g><g><title>_int_realloc (2 samples, 0.02%)</title><rect x="98.4369%" y="533" width="0.0180%" height="15" fill="rgb(241,25,7)" fg:x="10958" fg:w="2"/><text x="98.6869%" y="543.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="98.4369%" y="517" width="0.0180%" height="15" fill="rgb(242,119,39)" fg:x="10958" fg:w="2"/><text x="98.6869%" y="527.50"></text></g><g><title>yadb::storage::wal::WALEntry::serialize (8 samples, 0.07%)</title><rect x="98.4190%" y="597" width="0.0719%" height="15" fill="rgb(241,98,45)" fg:x="10956" fg:w="8"/><text x="98.6690%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.04%)</title><rect x="98.4549%" y="581" width="0.0359%" height="15" fill="rgb(254,28,30)" fg:x="10960" fg:w="4"/><text x="98.7049%" y="591.50"></text></g><g><title>malloc_consolidate (2 samples, 0.02%)</title><rect x="98.5178%" y="517" width="0.0180%" height="15" fill="rgb(241,142,54)" fg:x="10967" fg:w="2"/><text x="98.7678%" y="527.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (6 samples, 0.05%)</title><rect x="98.4908%" y="581" width="0.0539%" height="15" fill="rgb(222,85,15)" fg:x="10964" fg:w="6"/><text x="98.7408%" y="591.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (4 samples, 0.04%)</title><rect x="98.5088%" y="565" width="0.0359%" height="15" fill="rgb(210,85,47)" fg:x="10966" fg:w="4"/><text x="98.7588%" y="575.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="98.5178%" y="549" width="0.0269%" height="15" fill="rgb(224,206,25)" fg:x="10967" fg:w="3"/><text x="98.7678%" y="559.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="98.5178%" y="533" width="0.0269%" height="15" fill="rgb(243,201,19)" fg:x="10967" fg:w="3"/><text x="98.7678%" y="543.50"></text></g><g><title>yadb::storage::Tree::start_write::_{{closure}} (103 samples, 0.93%)</title><rect x="97.6285%" y="629" width="0.9253%" height="15" fill="rgb(236,59,4)" fg:x="10868" fg:w="103"/><text x="97.8785%" y="639.50"></text></g><g><title>yadb::storage::wal::WALFile::append_to_wal (16 samples, 0.14%)</title><rect x="98.4100%" y="613" width="0.1437%" height="15" fill="rgb(254,179,45)" fg:x="10955" fg:w="16"/><text x="98.6600%" y="623.50"></text></g><g><title>yadb::storage::wal::batch_writer::AsyncBufferedWriter::write (7 samples, 0.06%)</title><rect x="98.4908%" y="597" width="0.0629%" height="15" fill="rgb(226,14,10)" fg:x="10964" fg:w="7"/><text x="98.7408%" y="607.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (5 samples, 0.04%)</title><rect x="98.5717%" y="613" width="0.0449%" height="15" fill="rgb(244,27,41)" fg:x="10973" fg:w="5"/><text x="98.8217%" y="623.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (5 samples, 0.04%)</title><rect x="98.5717%" y="597" width="0.0449%" height="15" fill="rgb(235,35,32)" fg:x="10973" fg:w="5"/><text x="98.8217%" y="607.50"></text></g><g><title>syscall (5 samples, 0.04%)</title><rect x="98.5717%" y="581" width="0.0449%" height="15" fill="rgb(218,68,31)" fg:x="10973" fg:w="5"/><text x="98.8217%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="98.5717%" y="565" width="0.0449%" height="15" fill="rgb(207,120,37)" fg:x="10973" fg:w="5"/><text x="98.8217%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="98.5717%" y="549" width="0.0449%" height="15" fill="rgb(227,98,0)" fg:x="10973" fg:w="5"/><text x="98.8217%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="98.5717%" y="533" width="0.0449%" height="15" fill="rgb(207,7,3)" fg:x="10973" fg:w="5"/><text x="98.8217%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="98.5717%" y="517" width="0.0449%" height="15" fill="rgb(206,98,19)" fg:x="10973" fg:w="5"/><text x="98.8217%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="98.5807%" y="501" width="0.0359%" height="15" fill="rgb(217,5,26)" fg:x="10974" fg:w="4"/><text x="98.8307%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="98.5807%" y="485" width="0.0359%" height="15" fill="rgb(235,190,38)" fg:x="10974" fg:w="4"/><text x="98.8307%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="98.5807%" y="469" width="0.0359%" height="15" fill="rgb(247,86,24)" fg:x="10974" fg:w="4"/><text x="98.8307%" y="479.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (4 samples, 0.04%)</title><rect x="98.6166%" y="613" width="0.0359%" height="15" fill="rgb(205,101,16)" fg:x="10978" fg:w="4"/><text x="98.8666%" y="623.50"></text></g><g><title>tokio::time::interval::Interval::poll_tick (2 samples, 0.02%)</title><rect x="98.6346%" y="597" width="0.0180%" height="15" fill="rgb(246,168,33)" fg:x="10980" fg:w="2"/><text x="98.8846%" y="607.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (2 samples, 0.02%)</title><rect x="98.6346%" y="581" width="0.0180%" height="15" fill="rgb(231,114,1)" fg:x="10980" fg:w="2"/><text x="98.8846%" y="591.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (2 samples, 0.02%)</title><rect x="98.6346%" y="565" width="0.0180%" height="15" fill="rgb(207,184,53)" fg:x="10980" fg:w="2"/><text x="98.8846%" y="575.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="98.6525%" y="613" width="0.0180%" height="15" fill="rgb(224,95,51)" fg:x="10982" fg:w="2"/><text x="98.9025%" y="623.50"></text></g><g><title>_int_free (4 samples, 0.04%)</title><rect x="98.6705%" y="613" width="0.0359%" height="15" fill="rgb(212,188,45)" fg:x="10984" fg:w="4"/><text x="98.9205%" y="623.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (7 samples, 0.06%)</title><rect x="98.7244%" y="565" width="0.0629%" height="15" fill="rgb(223,154,38)" fg:x="10990" fg:w="7"/><text x="98.9744%" y="575.50"></text></g><g><title>syscall (7 samples, 0.06%)</title><rect x="98.7244%" y="549" width="0.0629%" height="15" fill="rgb(251,22,52)" fg:x="10990" fg:w="7"/><text x="98.9744%" y="559.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="98.7334%" y="533" width="0.0539%" height="15" fill="rgb(229,209,22)" fg:x="10991" fg:w="6"/><text x="98.9834%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="98.7334%" y="517" width="0.0539%" height="15" fill="rgb(234,138,34)" fg:x="10991" fg:w="6"/><text x="98.9834%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="98.7424%" y="501" width="0.0449%" height="15" fill="rgb(212,95,11)" fg:x="10992" fg:w="5"/><text x="98.9924%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="98.7513%" y="485" width="0.0359%" height="15" fill="rgb(240,179,47)" fg:x="10993" fg:w="4"/><text x="99.0013%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="98.7513%" y="469" width="0.0359%" height="15" fill="rgb(240,163,11)" fg:x="10993" fg:w="4"/><text x="99.0013%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="98.7513%" y="453" width="0.0359%" height="15" fill="rgb(236,37,12)" fg:x="10993" fg:w="4"/><text x="99.0013%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="98.7603%" y="437" width="0.0269%" height="15" fill="rgb(232,164,16)" fg:x="10994" fg:w="3"/><text x="99.0103%" y="447.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (10 samples, 0.09%)</title><rect x="98.7244%" y="597" width="0.0898%" height="15" fill="rgb(244,205,15)" fg:x="10990" fg:w="10"/><text x="98.9744%" y="607.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (10 samples, 0.09%)</title><rect x="98.7244%" y="581" width="0.0898%" height="15" fill="rgb(223,117,47)" fg:x="10990" fg:w="10"/><text x="98.9744%" y="591.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (3 samples, 0.03%)</title><rect x="98.7873%" y="565" width="0.0269%" height="15" fill="rgb(244,107,35)" fg:x="10997" fg:w="3"/><text x="99.0373%" y="575.50"></text></g><g><title>__rdl_alloc (3 samples, 0.03%)</title><rect x="98.7873%" y="549" width="0.0269%" height="15" fill="rgb(205,140,8)" fg:x="10997" fg:w="3"/><text x="99.0373%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.03%)</title><rect x="98.7873%" y="533" width="0.0269%" height="15" fill="rgb(228,84,46)" fg:x="10997" fg:w="3"/><text x="99.0373%" y="543.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (3 samples, 0.03%)</title><rect x="98.7873%" y="517" width="0.0269%" height="15" fill="rgb(254,188,9)" fg:x="10997" fg:w="3"/><text x="99.0373%" y="527.50"></text></g><g><title>__posix_memalign (3 samples, 0.03%)</title><rect x="98.7873%" y="501" width="0.0269%" height="15" fill="rgb(206,112,54)" fg:x="10997" fg:w="3"/><text x="99.0373%" y="511.50"></text></g><g><title>_int_memalign (3 samples, 0.03%)</title><rect x="98.7873%" y="485" width="0.0269%" height="15" fill="rgb(216,84,49)" fg:x="10997" fg:w="3"/><text x="99.0373%" y="495.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="98.7873%" y="469" width="0.0269%" height="15" fill="rgb(214,194,35)" fg:x="10997" fg:w="3"/><text x="99.0373%" y="479.50"></text></g><g><title>tokio::fs::file::File::sync_data::{{closure}} (13 samples, 0.12%)</title><rect x="98.7064%" y="613" width="0.1168%" height="15" fill="rgb(249,28,3)" fg:x="10988" fg:w="13"/><text x="98.9564%" y="623.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (2 samples, 0.02%)</title><rect x="98.8412%" y="597" width="0.0180%" height="15" fill="rgb(222,56,52)" fg:x="11003" fg:w="2"/><text x="99.0912%" y="607.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (10,914 samples, 98.04%)</title><rect x="0.8354%" y="645" width="98.0417%" height="15" fill="rgb(245,217,50)" fg:x="93" fg:w="10914"/><text x="1.0854%" y="655.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>yadb::storage::wal::batch_writer::AsyncBufferedWriter::new::_{{closure}} (36 samples, 0.32%)</title><rect x="98.5537%" y="629" width="0.3234%" height="15" fill="rgb(213,201,24)" fg:x="10971" fg:w="36"/><text x="98.8037%" y="639.50"></text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (6 samples, 0.05%)</title><rect x="98.8232%" y="613" width="0.0539%" height="15" fill="rgb(248,116,28)" fg:x="11001" fg:w="6"/><text x="99.0732%" y="623.50"></text></g><g><title>futures_task::waker::wake_by_ref_arc_raw (8 samples, 0.07%)</title><rect x="98.8861%" y="629" width="0.0719%" height="15" fill="rgb(219,72,43)" fg:x="11008" fg:w="8"/><text x="99.1361%" y="639.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (8 samples, 0.07%)</title><rect x="98.8861%" y="613" width="0.0719%" height="15" fill="rgb(209,138,14)" fg:x="11008" fg:w="8"/><text x="99.1361%" y="623.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::remove (3 samples, 0.03%)</title><rect x="98.9580%" y="629" width="0.0269%" height="15" fill="rgb(222,18,33)" fg:x="11016" fg:w="3"/><text x="99.2080%" y="639.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (13 samples, 0.12%)</title><rect x="98.8861%" y="645" width="0.1168%" height="15" fill="rgb(213,199,7)" fg:x="11008" fg:w="13"/><text x="99.1361%" y="655.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (10,937 samples, 98.25%)</title><rect x="0.7905%" y="661" width="98.2483%" height="15" fill="rgb(250,110,10)" fg:x="88" fg:w="10937"/><text x="1.0405%" y="671.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (4 samples, 0.04%)</title><rect x="99.0029%" y="645" width="0.0359%" height="15" fill="rgb(248,123,6)" fg:x="11021" fg:w="4"/><text x="99.2529%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::run_task (10,943 samples, 98.30%)</title><rect x="0.7546%" y="677" width="98.3022%" height="15" fill="rgb(206,91,31)" fg:x="84" fg:w="10943"/><text x="1.0046%" y="687.50">tokio::runtime::scheduler::current_thread::Context::run_task</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2 samples, 0.02%)</title><rect x="99.0388%" y="661" width="0.0180%" height="15" fill="rgb(211,154,13)" fg:x="11025" fg:w="2"/><text x="99.2888%" y="671.50"></text></g><g><title>split_bench (11,030 samples, 99.08%)</title><rect x="0.0000%" y="1189" width="99.0837%" height="15" fill="rgb(225,148,7)" fg:x="0" fg:w="11030"/><text x="0.2500%" y="1199.50">split_bench</text></g><g><title>__GI___clone (11,028 samples, 99.07%)</title><rect x="0.0180%" y="1173" width="99.0658%" height="15" fill="rgb(220,160,43)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="1183.50">__GI___clone</text></g><g><title>start_thread (11,028 samples, 99.07%)</title><rect x="0.0180%" y="1157" width="99.0658%" height="15" fill="rgb(213,52,39)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="1167.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (11,028 samples, 99.07%)</title><rect x="0.0180%" y="1141" width="99.0658%" height="15" fill="rgb(243,137,7)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="1151.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (11,028 samples, 99.07%)</title><rect x="0.0180%" y="1125" width="99.0658%" height="15" fill="rgb(230,79,13)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="1135.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (11,028 samples, 99.07%)</title><rect x="0.0180%" y="1109" width="99.0658%" height="15" fill="rgb(247,105,23)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="1119.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (11,028 samples, 99.07%)</title><rect x="0.0180%" y="1093" width="99.0658%" height="15" fill="rgb(223,179,41)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="1103.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (11,028 samples, 99.07%)</title><rect x="0.0180%" y="1077" width="99.0658%" height="15" fill="rgb(218,9,34)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="1087.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (11,028 samples, 99.07%)</title><rect x="0.0180%" y="1061" width="99.0658%" height="15" fill="rgb(222,106,8)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="1071.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (11,028 samples, 99.07%)</title><rect x="0.0180%" y="1045" width="99.0658%" height="15" fill="rgb(211,220,0)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="1055.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (11,028 samples, 99.07%)</title><rect x="0.0180%" y="1029" width="99.0658%" height="15" fill="rgb(229,52,16)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="1039.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (11,028 samples, 99.07%)</title><rect x="0.0180%" y="1013" width="99.0658%" height="15" fill="rgb(212,155,18)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="1023.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (11,028 samples, 99.07%)</title><rect x="0.0180%" y="997" width="99.0658%" height="15" fill="rgb(242,21,14)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="1007.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11,028 samples, 99.07%)</title><rect x="0.0180%" y="981" width="99.0658%" height="15" fill="rgb(222,19,48)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="991.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::run_test_inner::{{closure}} (11,028 samples, 99.07%)</title><rect x="0.0180%" y="965" width="99.0658%" height="15" fill="rgb(232,45,27)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="975.50">test::run_test::run_test_inner::{{closure}}</text></g><g><title>test::run_test::run_test_inner::{{closure}} (11,028 samples, 99.07%)</title><rect x="0.0180%" y="949" width="99.0658%" height="15" fill="rgb(249,103,42)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="959.50">test::run_test::run_test_inner::{{closure}}</text></g><g><title>test::run_test_in_process (11,028 samples, 99.07%)</title><rect x="0.0180%" y="933" width="99.0658%" height="15" fill="rgb(246,81,33)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="943.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (11,028 samples, 99.07%)</title><rect x="0.0180%" y="917" width="99.0658%" height="15" fill="rgb(252,33,42)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (11,028 samples, 99.07%)</title><rect x="0.0180%" y="901" width="99.0658%" height="15" fill="rgb(209,212,41)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (11,028 samples, 99.07%)</title><rect x="0.0180%" y="885" width="99.0658%" height="15" fill="rgb(207,154,6)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="895.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (11,028 samples, 99.07%)</title><rect x="0.0180%" y="869" width="99.0658%" height="15" fill="rgb(223,64,47)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="879.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (11,028 samples, 99.07%)</title><rect x="0.0180%" y="853" width="99.0658%" height="15" fill="rgb(211,161,38)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="863.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (11,028 samples, 99.07%)</title><rect x="0.0180%" y="837" width="99.0658%" height="15" fill="rgb(219,138,40)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="847.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>test::run_test::{{closure}} (11,028 samples, 99.07%)</title><rect x="0.0180%" y="821" width="99.0658%" height="15" fill="rgb(241,228,46)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="831.50">test::run_test::{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (11,028 samples, 99.07%)</title><rect x="0.0180%" y="805" width="99.0658%" height="15" fill="rgb(223,209,38)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="815.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (11,028 samples, 99.07%)</title><rect x="0.0180%" y="789" width="99.0658%" height="15" fill="rgb(236,164,45)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="799.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (11,028 samples, 99.07%)</title><rect x="0.0180%" y="773" width="99.0658%" height="15" fill="rgb(231,15,5)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="783.50">core::ops::function::FnOnce::call_once</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (11,028 samples, 99.07%)</title><rect x="0.0180%" y="757" width="99.0658%" height="15" fill="rgb(252,35,15)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="767.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (11,028 samples, 99.07%)</title><rect x="0.0180%" y="741" width="99.0658%" height="15" fill="rgb(248,181,18)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="751.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (11,028 samples, 99.07%)</title><rect x="0.0180%" y="725" width="99.0658%" height="15" fill="rgb(233,39,42)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="735.50">tokio::runtime::scheduler::current_thread::CoreGuard::block_on</text></g><g><title>tokio::runtime::context::set_scheduler (11,028 samples, 99.07%)</title><rect x="0.0180%" y="709" width="99.0658%" height="15" fill="rgb(238,110,33)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="719.50">tokio::runtime::context::set_scheduler</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (11,028 samples, 99.07%)</title><rect x="0.0180%" y="693" width="99.0658%" height="15" fill="rgb(233,195,10)" fg:x="2" fg:w="11028"/><text x="0.2680%" y="703.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (3 samples, 0.03%)</title><rect x="99.0568%" y="677" width="0.0269%" height="15" fill="rgb(254,105,3)" fg:x="11027" fg:w="3"/><text x="99.3068%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (10 samples, 0.09%)</title><rect x="99.0927%" y="1045" width="0.0898%" height="15" fill="rgb(221,225,9)" fg:x="11031" fg:w="10"/><text x="99.3427%" y="1055.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (10 samples, 0.09%)</title><rect x="99.0927%" y="1029" width="0.0898%" height="15" fill="rgb(224,227,45)" fg:x="11031" fg:w="10"/><text x="99.3427%" y="1039.50"></text></g><g><title>std::sys::unix::futex::futex_wait (10 samples, 0.09%)</title><rect x="99.0927%" y="1013" width="0.0898%" height="15" fill="rgb(229,198,43)" fg:x="11031" fg:w="10"/><text x="99.3427%" y="1023.50"></text></g><g><title>syscall (8 samples, 0.07%)</title><rect x="99.1107%" y="997" width="0.0719%" height="15" fill="rgb(206,209,35)" fg:x="11033" fg:w="8"/><text x="99.3607%" y="1007.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="99.1286%" y="981" width="0.0539%" height="15" fill="rgb(245,195,53)" fg:x="11035" fg:w="6"/><text x="99.3786%" y="991.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="99.1286%" y="965" width="0.0539%" height="15" fill="rgb(240,92,26)" fg:x="11035" fg:w="6"/><text x="99.3786%" y="975.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="99.1286%" y="949" width="0.0539%" height="15" fill="rgb(207,40,23)" fg:x="11035" fg:w="6"/><text x="99.3786%" y="959.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="99.1286%" y="933" width="0.0539%" height="15" fill="rgb(223,111,35)" fg:x="11035" fg:w="6"/><text x="99.3786%" y="943.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.1376%" y="917" width="0.0449%" height="15" fill="rgb(229,147,28)" fg:x="11036" fg:w="5"/><text x="99.3876%" y="927.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="99.1466%" y="901" width="0.0359%" height="15" fill="rgb(211,29,28)" fg:x="11037" fg:w="4"/><text x="99.3966%" y="911.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="99.1466%" y="885" width="0.0359%" height="15" fill="rgb(228,72,33)" fg:x="11037" fg:w="4"/><text x="99.3966%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.1556%" y="869" width="0.0269%" height="15" fill="rgb(205,214,31)" fg:x="11038" fg:w="3"/><text x="99.4056%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.1646%" y="853" width="0.0180%" height="15" fill="rgb(224,111,15)" fg:x="11039" fg:w="2"/><text x="99.4146%" y="863.50"></text></g><g><title>[unknown] (60 samples, 0.54%)</title><rect x="99.2185%" y="901" width="0.5390%" height="15" fill="rgb(253,21,26)" fg:x="11045" fg:w="60"/><text x="99.4685%" y="911.50"></text></g><g><title>[unknown] (60 samples, 0.54%)</title><rect x="99.2185%" y="885" width="0.5390%" height="15" fill="rgb(245,139,43)" fg:x="11045" fg:w="60"/><text x="99.4685%" y="895.50"></text></g><g><title>[unknown] (60 samples, 0.54%)</title><rect x="99.2185%" y="869" width="0.5390%" height="15" fill="rgb(252,170,7)" fg:x="11045" fg:w="60"/><text x="99.4685%" y="879.50"></text></g><g><title>[unknown] (57 samples, 0.51%)</title><rect x="99.2454%" y="853" width="0.5120%" height="15" fill="rgb(231,118,14)" fg:x="11048" fg:w="57"/><text x="99.4954%" y="863.50"></text></g><g><title>[unknown] (56 samples, 0.50%)</title><rect x="99.2544%" y="837" width="0.5031%" height="15" fill="rgb(238,83,0)" fg:x="11049" fg:w="56"/><text x="99.5044%" y="847.50"></text></g><g><title>[unknown] (55 samples, 0.49%)</title><rect x="99.2634%" y="821" width="0.4941%" height="15" fill="rgb(221,39,39)" fg:x="11050" fg:w="55"/><text x="99.5134%" y="831.50"></text></g><g><title>[unknown] (54 samples, 0.49%)</title><rect x="99.2724%" y="805" width="0.4851%" height="15" fill="rgb(222,119,46)" fg:x="11051" fg:w="54"/><text x="99.5224%" y="815.50"></text></g><g><title>[unknown] (54 samples, 0.49%)</title><rect x="99.2724%" y="789" width="0.4851%" height="15" fill="rgb(222,165,49)" fg:x="11051" fg:w="54"/><text x="99.5224%" y="799.50"></text></g><g><title>[unknown] (54 samples, 0.49%)</title><rect x="99.2724%" y="773" width="0.4851%" height="15" fill="rgb(219,113,52)" fg:x="11051" fg:w="54"/><text x="99.5224%" y="783.50"></text></g><g><title>[unknown] (48 samples, 0.43%)</title><rect x="99.3263%" y="757" width="0.4312%" height="15" fill="rgb(214,7,15)" fg:x="11057" fg:w="48"/><text x="99.5763%" y="767.50"></text></g><g><title>[unknown] (40 samples, 0.36%)</title><rect x="99.3981%" y="741" width="0.3593%" height="15" fill="rgb(235,32,4)" fg:x="11065" fg:w="40"/><text x="99.6481%" y="751.50"></text></g><g><title>[unknown] (40 samples, 0.36%)</title><rect x="99.3981%" y="725" width="0.3593%" height="15" fill="rgb(238,90,54)" fg:x="11065" fg:w="40"/><text x="99.6481%" y="735.50"></text></g><g><title>[unknown] (33 samples, 0.30%)</title><rect x="99.4610%" y="709" width="0.2964%" height="15" fill="rgb(213,208,19)" fg:x="11072" fg:w="33"/><text x="99.7110%" y="719.50"></text></g><g><title>[unknown] (21 samples, 0.19%)</title><rect x="99.5688%" y="693" width="0.1886%" height="15" fill="rgb(233,156,4)" fg:x="11084" fg:w="21"/><text x="99.8188%" y="703.50"></text></g><g><title>[unknown] (18 samples, 0.16%)</title><rect x="99.5958%" y="677" width="0.1617%" height="15" fill="rgb(207,194,5)" fg:x="11087" fg:w="18"/><text x="99.8458%" y="687.50"></text></g><g><title>[unknown] (14 samples, 0.13%)</title><rect x="99.6317%" y="661" width="0.1258%" height="15" fill="rgb(206,111,30)" fg:x="11091" fg:w="14"/><text x="99.8817%" y="671.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="99.6766%" y="645" width="0.0808%" height="15" fill="rgb(243,70,54)" fg:x="11096" fg:w="9"/><text x="99.9266%" y="655.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="99.6856%" y="629" width="0.0719%" height="15" fill="rgb(242,28,8)" fg:x="11097" fg:w="8"/><text x="99.9356%" y="639.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="99.6946%" y="613" width="0.0629%" height="15" fill="rgb(219,106,18)" fg:x="11098" fg:w="7"/><text x="99.9446%" y="623.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="99.7036%" y="597" width="0.0539%" height="15" fill="rgb(244,222,10)" fg:x="11099" fg:w="6"/><text x="99.9536%" y="607.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="99.7036%" y="581" width="0.0539%" height="15" fill="rgb(236,179,52)" fg:x="11099" fg:w="6"/><text x="99.9536%" y="591.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="99.7036%" y="565" width="0.0539%" height="15" fill="rgb(213,23,39)" fg:x="11099" fg:w="6"/><text x="99.9536%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.7125%" y="549" width="0.0449%" height="15" fill="rgb(238,48,10)" fg:x="11100" fg:w="5"/><text x="99.9625%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="99.7215%" y="533" width="0.0359%" height="15" fill="rgb(251,196,23)" fg:x="11101" fg:w="4"/><text x="99.9715%" y="543.50"></text></g><g><title>std::fs::File::sync_data (62 samples, 0.56%)</title><rect x="99.2095%" y="997" width="0.5570%" height="15" fill="rgb(250,152,24)" fg:x="11044" fg:w="62"/><text x="99.4595%" y="1007.50"></text></g><g><title>std::sys::unix::fs::File::datasync (62 samples, 0.56%)</title><rect x="99.2095%" y="981" width="0.5570%" height="15" fill="rgb(209,150,17)" fg:x="11044" fg:w="62"/><text x="99.4595%" y="991.50"></text></g><g><title>std::sys::unix::cvt_r (62 samples, 0.56%)</title><rect x="99.2095%" y="965" width="0.5570%" height="15" fill="rgb(234,202,34)" fg:x="11044" fg:w="62"/><text x="99.4595%" y="975.50"></text></g><g><title>std::sys::unix::fs::File::datasync::{{closure}} (62 samples, 0.56%)</title><rect x="99.2095%" y="949" width="0.5570%" height="15" fill="rgb(253,148,53)" fg:x="11044" fg:w="62"/><text x="99.4595%" y="959.50"></text></g><g><title>std::sys::unix::fs::File::datasync::os_datasync (62 samples, 0.56%)</title><rect x="99.2095%" y="933" width="0.5570%" height="15" fill="rgb(218,129,16)" fg:x="11044" fg:w="62"/><text x="99.4595%" y="943.50"></text></g><g><title>fdatasync (62 samples, 0.56%)</title><rect x="99.2095%" y="917" width="0.5570%" height="15" fill="rgb(216,85,19)" fg:x="11044" fg:w="62"/><text x="99.4595%" y="927.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (80 samples, 0.72%)</title><rect x="99.2005%" y="1013" width="0.7186%" height="15" fill="rgb(235,228,7)" fg:x="11043" fg:w="80"/><text x="99.4505%" y="1023.50"></text></g><g><title>std::io::Write::write_all (17 samples, 0.15%)</title><rect x="99.7664%" y="997" width="0.1527%" height="15" fill="rgb(245,175,0)" fg:x="11106" fg:w="17"/><text x="100.0164%" y="1007.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (17 samples, 0.15%)</title><rect x="99.7664%" y="981" width="0.1527%" height="15" fill="rgb(208,168,36)" fg:x="11106" fg:w="17"/><text x="100.0164%" y="991.50"></text></g><g><title>std::sys::unix::fs::File::write (17 samples, 0.15%)</title><rect x="99.7664%" y="965" width="0.1527%" height="15" fill="rgb(246,171,24)" fg:x="11106" fg:w="17"/><text x="100.0164%" y="975.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (17 samples, 0.15%)</title><rect x="99.7664%" y="949" width="0.1527%" height="15" fill="rgb(215,142,24)" fg:x="11106" fg:w="17"/><text x="100.0164%" y="959.50"></text></g><g><title>__libc_write (17 samples, 0.15%)</title><rect x="99.7664%" y="933" width="0.1527%" height="15" fill="rgb(250,187,7)" fg:x="11106" fg:w="17"/><text x="100.0164%" y="943.50"></text></g><g><title>__libc_write (17 samples, 0.15%)</title><rect x="99.7664%" y="917" width="0.1527%" height="15" fill="rgb(228,66,33)" fg:x="11106" fg:w="17"/><text x="100.0164%" y="927.50"></text></g><g><title>[unknown] (16 samples, 0.14%)</title><rect x="99.7754%" y="901" width="0.1437%" height="15" fill="rgb(234,215,21)" fg:x="11107" fg:w="16"/><text x="100.0254%" y="911.50"></text></g><g><title>[unknown] (16 samples, 0.14%)</title><rect x="99.7754%" y="885" width="0.1437%" height="15" fill="rgb(222,191,20)" fg:x="11107" fg:w="16"/><text x="100.0254%" y="895.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="99.7844%" y="869" width="0.1347%" height="15" fill="rgb(245,79,54)" fg:x="11108" fg:w="15"/><text x="100.0344%" y="879.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="99.7844%" y="853" width="0.1347%" height="15" fill="rgb(240,10,37)" fg:x="11108" fg:w="15"/><text x="100.0344%" y="863.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="99.7844%" y="837" width="0.1347%" height="15" fill="rgb(214,192,32)" fg:x="11108" fg:w="15"/><text x="100.0344%" y="847.50"></text></g><g><title>[unknown] (14 samples, 0.13%)</title><rect x="99.7934%" y="821" width="0.1258%" height="15" fill="rgb(209,36,54)" fg:x="11109" fg:w="14"/><text x="100.0434%" y="831.50"></text></g><g><title>[unknown] (14 samples, 0.13%)</title><rect x="99.7934%" y="805" width="0.1258%" height="15" fill="rgb(220,10,11)" fg:x="11109" fg:w="14"/><text x="100.0434%" y="815.50"></text></g><g><title>[unknown] (13 samples, 0.12%)</title><rect x="99.8024%" y="789" width="0.1168%" height="15" fill="rgb(221,106,17)" fg:x="11110" fg:w="13"/><text x="100.0524%" y="799.50"></text></g><g><title>[unknown] (13 samples, 0.12%)</title><rect x="99.8024%" y="773" width="0.1168%" height="15" fill="rgb(251,142,44)" fg:x="11110" fg:w="13"/><text x="100.0524%" y="783.50"></text></g><g><title>[unknown] (12 samples, 0.11%)</title><rect x="99.8114%" y="757" width="0.1078%" height="15" fill="rgb(238,13,15)" fg:x="11111" fg:w="12"/><text x="100.0614%" y="767.50"></text></g><g><title>[unknown] (10 samples, 0.09%)</title><rect x="99.8293%" y="741" width="0.0898%" height="15" fill="rgb(208,107,27)" fg:x="11113" fg:w="10"/><text x="100.0793%" y="751.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="99.8383%" y="725" width="0.0808%" height="15" fill="rgb(205,136,37)" fg:x="11114" fg:w="9"/><text x="100.0883%" y="735.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="99.8473%" y="709" width="0.0719%" height="15" fill="rgb(250,205,27)" fg:x="11115" fg:w="8"/><text x="100.0973%" y="719.50"></text></g><g><title>[unknown] (8 samples, 0.07%)</title><rect x="99.8473%" y="693" width="0.0719%" height="15" fill="rgb(210,80,43)" fg:x="11115" fg:w="8"/><text x="100.0973%" y="703.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="99.8563%" y="677" width="0.0629%" height="15" fill="rgb(247,160,36)" fg:x="11116" fg:w="7"/><text x="100.1063%" y="687.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="99.8563%" y="661" width="0.0629%" height="15" fill="rgb(234,13,49)" fg:x="11116" fg:w="7"/><text x="100.1063%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.8742%" y="645" width="0.0449%" height="15" fill="rgb(234,122,0)" fg:x="11118" fg:w="5"/><text x="100.1242%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.8922%" y="629" width="0.0269%" height="15" fill="rgb(207,146,38)" fg:x="11120" fg:w="3"/><text x="100.1422%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.9012%" y="613" width="0.0180%" height="15" fill="rgb(207,177,25)" fg:x="11121" fg:w="2"/><text x="100.1512%" y="623.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (81 samples, 0.73%)</title><rect x="99.2005%" y="1029" width="0.7276%" height="15" fill="rgb(211,178,42)" fg:x="11043" fg:w="81"/><text x="99.4505%" y="1039.50"></text></g><g><title>syscall (2 samples, 0.02%)</title><rect x="99.9551%" y="1013" width="0.0180%" height="15" fill="rgb(230,69,54)" fg:x="11127" fg:w="2"/><text x="100.2051%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.9551%" y="997" width="0.0180%" height="15" fill="rgb(214,135,41)" fg:x="11127" fg:w="2"/><text x="100.2051%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.9551%" y="981" width="0.0180%" height="15" fill="rgb(237,67,25)" fg:x="11127" fg:w="2"/><text x="100.2051%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.9551%" y="965" width="0.0180%" height="15" fill="rgb(222,189,50)" fg:x="11127" fg:w="2"/><text x="100.2051%" y="975.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (7 samples, 0.06%)</title><rect x="99.9281%" y="1029" width="0.0629%" height="15" fill="rgb(245,148,34)" fg:x="11124" fg:w="7"/><text x="100.1781%" y="1039.50"></text></g><g><title>all (11,132 samples, 100%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(222,29,6)" fg:x="0" fg:w="11132"/><text x="0.2500%" y="1215.50"></text></g><g><title>tokio-runtime-w (101 samples, 0.91%)</title><rect x="99.0927%" y="1189" width="0.9073%" height="15" fill="rgb(221,189,43)" fg:x="11031" fg:w="101"/><text x="99.3427%" y="1199.50"></text></g><g><title>__GI___clone (101 samples, 0.91%)</title><rect x="99.0927%" y="1173" width="0.9073%" height="15" fill="rgb(207,36,27)" fg:x="11031" fg:w="101"/><text x="99.3427%" y="1183.50"></text></g><g><title>start_thread (101 samples, 0.91%)</title><rect x="99.0927%" y="1157" width="0.9073%" height="15" fill="rgb(217,90,24)" fg:x="11031" fg:w="101"/><text x="99.3427%" y="1167.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (101 samples, 0.91%)</title><rect x="99.0927%" y="1141" width="0.9073%" height="15" fill="rgb(224,66,35)" fg:x="11031" fg:w="101"/><text x="99.3427%" y="1151.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (101 samples, 0.91%)</title><rect x="99.0927%" y="1125" width="0.9073%" height="15" fill="rgb(221,13,50)" fg:x="11031" fg:w="101"/><text x="99.3427%" y="1135.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (101 samples, 0.91%)</title><rect x="99.0927%" y="1109" width="0.9073%" height="15" fill="rgb(236,68,49)" fg:x="11031" fg:w="101"/><text x="99.3427%" y="1119.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (101 samples, 0.91%)</title><rect x="99.0927%" y="1093" width="0.9073%" height="15" fill="rgb(229,146,28)" fg:x="11031" fg:w="101"/><text x="99.3427%" y="1103.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (101 samples, 0.91%)</title><rect x="99.0927%" y="1077" width="0.9073%" height="15" fill="rgb(225,31,38)" fg:x="11031" fg:w="101"/><text x="99.3427%" y="1087.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (101 samples, 0.91%)</title><rect x="99.0927%" y="1061" width="0.9073%" height="15" fill="rgb(250,208,3)" fg:x="11031" fg:w="101"/><text x="99.3427%" y="1071.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (90 samples, 0.81%)</title><rect x="99.1915%" y="1045" width="0.8085%" height="15" fill="rgb(246,54,23)" fg:x="11042" fg:w="90"/><text x="99.4415%" y="1055.50"></text></g></svg></svg>